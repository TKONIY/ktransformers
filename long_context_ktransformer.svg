<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1510" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1493.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1493.00"> </text><svg id="frames" x="10" width="1180" total_samples="8125266"><g><title>do_poll.constprop.0 (1,123 samples, 0.01%)</title><rect x="0.0067%" y="1253" width="0.0138%" height="15" fill="rgb(227,0,7)" fg:x="544" fg:w="1123"/><text x="0.2567%" y="1263.50"></text></g><g><title>do_sys_poll (1,242 samples, 0.02%)</title><rect x="0.0063%" y="1269" width="0.0153%" height="15" fill="rgb(217,0,24)" fg:x="508" fg:w="1242"/><text x="0.2563%" y="1279.50"></text></g><g><title>__x64_sys_poll (1,255 samples, 0.02%)</title><rect x="0.0062%" y="1285" width="0.0154%" height="15" fill="rgb(221,193,54)" fg:x="501" fg:w="1255"/><text x="0.2562%" y="1295.50"></text></g><g><title>do_syscall_64 (1,298 samples, 0.02%)</title><rect x="0.0056%" y="1317" width="0.0160%" height="15" fill="rgb(248,212,6)" fg:x="459" fg:w="1298"/><text x="0.2556%" y="1327.50"></text></g><g><title>x64_sys_call (1,256 samples, 0.02%)</title><rect x="0.0062%" y="1301" width="0.0155%" height="15" fill="rgb(208,68,35)" fg:x="501" fg:w="1256"/><text x="0.2562%" y="1311.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,311 samples, 0.02%)</title><rect x="0.0055%" y="1333" width="0.0161%" height="15" fill="rgb(232,128,0)" fg:x="449" fg:w="1311"/><text x="0.2555%" y="1343.50"></text></g><g><title>__poll (1,333 samples, 0.02%)</title><rect x="0.0053%" y="1349" width="0.0164%" height="15" fill="rgb(207,160,47)" fg:x="430" fg:w="1333"/><text x="0.2553%" y="1359.50"></text></g><g><title>[libcuda.so.560.35.03] (1,834 samples, 0.02%)</title><rect x="0.0003%" y="1365" width="0.0226%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="1834"/><text x="0.2503%" y="1375.50"></text></g><g><title>[libc.so.6] (1,880 samples, 0.02%)</title><rect x="0.0001%" y="1429" width="0.0231%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1880"/><text x="0.2501%" y="1439.50"></text></g><g><title>[libc.so.6] (1,880 samples, 0.02%)</title><rect x="0.0001%" y="1413" width="0.0231%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1880"/><text x="0.2501%" y="1423.50"></text></g><g><title>[libcuda.so.560.35.03] (1,880 samples, 0.02%)</title><rect x="0.0001%" y="1397" width="0.0231%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1880"/><text x="0.2501%" y="1407.50"></text></g><g><title>[libcuda.so.560.35.03] (1,880 samples, 0.02%)</title><rect x="0.0001%" y="1381" width="0.0231%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1880"/><text x="0.2501%" y="1391.50"></text></g><g><title>cuda-EvtHandlr (1,894 samples, 0.02%)</title><rect x="0.0000%" y="1445" width="0.0233%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1894"/><text x="0.2500%" y="1455.50"></text></g><g><title>[[vdso]] (86,807 samples, 1.07%)</title><rect x="0.0235%" y="1413" width="1.0684%" height="15" fill="rgb(206,188,39)" fg:x="1907" fg:w="86807"/><text x="0.2735%" y="1423.50"></text></g><g><title>[libc.so.6] (92,321 samples, 1.14%)</title><rect x="1.0949%" y="1413" width="1.1362%" height="15" fill="rgb(217,207,13)" fg:x="88966" fg:w="92321"/><text x="1.3449%" y="1423.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (92,112 samples, 1.13%)</title><rect x="1.0975%" y="1397" width="1.1336%" height="15" fill="rgb(231,73,38)" fg:x="89175" fg:w="92112"/><text x="1.3475%" y="1407.50"></text></g><g><title>pthread_mutex_lock (3,068 samples, 0.04%)</title><rect x="2.2409%" y="1413" width="0.0378%" height="15" fill="rgb(225,20,46)" fg:x="182081" fg:w="3068"/><text x="2.4909%" y="1423.50"></text></g><g><title>pthread_mutex_unlock (1,853 samples, 0.02%)</title><rect x="2.2787%" y="1413" width="0.0228%" height="15" fill="rgb(210,31,41)" fg:x="185149" fg:w="1853"/><text x="2.5287%" y="1423.50"></text></g><g><title>[[heap]] (185,146 samples, 2.28%)</title><rect x="0.0233%" y="1429" width="2.2786%" height="15" fill="rgb(221,200,47)" fg:x="1896" fg:w="185146"/><text x="0.2733%" y="1439.50">[..</text></g><g><title>[libcuda.so.560.35.03] (1,434 samples, 0.02%)</title><rect x="2.3130%" y="1413" width="0.0176%" height="15" fill="rgb(226,26,5)" fg:x="187934" fg:w="1434"/><text x="2.5630%" y="1423.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (92,071 samples, 1.13%)</title><rect x="2.3439%" y="1413" width="1.1331%" height="15" fill="rgb(249,33,26)" fg:x="190447" fg:w="92071"/><text x="2.5939%" y="1423.50"></text></g><g><title>[[stack]] (95,522 samples, 1.18%)</title><rect x="2.3020%" y="1429" width="1.1756%" height="15" fill="rgb(235,183,28)" fg:x="187042" fg:w="95522"/><text x="2.5520%" y="1439.50"></text></g><g><title>pthread_mutex_unlock (1,096 samples, 0.01%)</title><rect x="3.4869%" y="1413" width="0.0135%" height="15" fill="rgb(221,5,38)" fg:x="283323" fg:w="1096"/><text x="3.7369%" y="1423.50"></text></g><g><title>[anon] (1,854 samples, 0.02%)</title><rect x="3.4782%" y="1429" width="0.0228%" height="15" fill="rgb(247,18,42)" fg:x="282610" fg:w="1854"/><text x="3.7282%" y="1439.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (69,693 samples, 0.86%)</title><rect x="3.5049%" y="1365" width="0.8577%" height="15" fill="rgb(241,131,45)" fg:x="284786" fg:w="69693"/><text x="3.7549%" y="1375.50"></text></g><g><title>[libcuda.so.560.35.03] (70,413 samples, 0.87%)</title><rect x="3.5041%" y="1397" width="0.8666%" height="15" fill="rgb(249,31,29)" fg:x="284718" fg:w="70413"/><text x="3.7541%" y="1407.50"></text></g><g><title>[libcuda.so.560.35.03] (70,413 samples, 0.87%)</title><rect x="3.5041%" y="1381" width="0.8666%" height="15" fill="rgb(225,111,53)" fg:x="284718" fg:w="70413"/><text x="3.7541%" y="1391.50"></text></g><g><title>do_user_addr_fault (1,077 samples, 0.01%)</title><rect x="4.3818%" y="1317" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="356036" fg:w="1077"/><text x="4.6318%" y="1327.50"></text></g><g><title>exc_page_fault (1,337 samples, 0.02%)</title><rect x="4.3814%" y="1333" width="0.0165%" height="15" fill="rgb(214,148,48)" fg:x="356001" fg:w="1337"/><text x="4.6314%" y="1343.50"></text></g><g><title>asm_exc_page_fault (1,341 samples, 0.02%)</title><rect x="4.3814%" y="1349" width="0.0165%" height="15" fill="rgb(232,36,49)" fg:x="355998" fg:w="1341"/><text x="4.6314%" y="1359.50"></text></g><g><title>[libc.so.6] (1,447 samples, 0.02%)</title><rect x="4.3805%" y="1365" width="0.0178%" height="15" fill="rgb(209,103,24)" fg:x="355931" fg:w="1447"/><text x="4.6305%" y="1375.50"></text></g><g><title>[libgomp-a34b3233.so.1] (2,278 samples, 0.03%)</title><rect x="4.3707%" y="1397" width="0.0280%" height="15" fill="rgb(229,88,8)" fg:x="355131" fg:w="2278"/><text x="4.6207%" y="1407.50"></text></g><g><title>at::internal::invoke_parallel&lt;at::parallel_for&lt;at::native::index_select_out_cpu_(at::Tensor const&amp;, long, at::Tensor const&amp;, at::Tensor&amp;)::{lambda(long, long)#3}&gt;(long, long, long, at::native::index_select_out_cpu_(at::Tensor const&amp;, long, at::Tensor const&amp;, at::Tensor&amp;)::{lambda(long, long)#3} const&amp;)::{lambda(long, long)#1}&gt; (1,478 samples, 0.02%)</title><rect x="4.3805%" y="1381" width="0.0182%" height="15" fill="rgb(213,181,19)" fg:x="355931" fg:w="1478"/><text x="4.6305%" y="1391.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (35,916 samples, 0.44%)</title><rect x="35.4545%" y="1237" width="0.4420%" height="15" fill="rgb(254,191,54)" fg:x="2880776" fg:w="35916"/><text x="35.7045%" y="1247.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (35,900 samples, 0.44%)</title><rect x="35.4547%" y="1221" width="0.4418%" height="15" fill="rgb(241,83,37)" fg:x="2880792" fg:w="35900"/><text x="35.7047%" y="1231.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (35,970 samples, 0.44%)</title><rect x="35.4539%" y="1253" width="0.4427%" height="15" fill="rgb(233,36,39)" fg:x="2880723" fg:w="35970"/><text x="35.7039%" y="1263.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (36,979 samples, 0.46%)</title><rect x="35.4442%" y="1269" width="0.4551%" height="15" fill="rgb(226,3,54)" fg:x="2879933" fg:w="36979"/><text x="35.6942%" y="1279.50"></text></g><g><title>down_read_trylock (2,137 samples, 0.03%)</title><rect x="35.9034%" y="1221" width="0.0263%" height="15" fill="rgb(245,192,40)" fg:x="2917249" fg:w="2137"/><text x="36.1534%" y="1231.50"></text></g><g><title>migrate_pages (976 samples, 0.01%)</title><rect x="35.9577%" y="1141" width="0.0120%" height="15" fill="rgb(238,167,29)" fg:x="2921659" fg:w="976"/><text x="36.2077%" y="1151.50"></text></g><g><title>unmap_and_move (973 samples, 0.01%)</title><rect x="35.9577%" y="1125" width="0.0120%" height="15" fill="rgb(232,182,51)" fg:x="2921662" fg:w="973"/><text x="36.2077%" y="1135.50"></text></g><g><title>migrate_misplaced_page (1,036 samples, 0.01%)</title><rect x="35.9570%" y="1157" width="0.0128%" height="15" fill="rgb(231,60,39)" fg:x="2921601" fg:w="1036"/><text x="36.2070%" y="1167.50"></text></g><g><title>do_numa_page (1,843 samples, 0.02%)</title><rect x="35.9527%" y="1173" width="0.0227%" height="15" fill="rgb(208,69,12)" fg:x="2921255" fg:w="1843"/><text x="36.2027%" y="1183.50"></text></g><g><title>handle_pte_fault (2,101 samples, 0.03%)</title><rect x="35.9499%" y="1189" width="0.0259%" height="15" fill="rgb(235,93,37)" fg:x="2921026" fg:w="2101"/><text x="36.1999%" y="1199.50"></text></g><g><title>__handle_mm_fault (3,504 samples, 0.04%)</title><rect x="35.9329%" y="1205" width="0.0431%" height="15" fill="rgb(213,116,39)" fg:x="2919641" fg:w="3504"/><text x="36.1829%" y="1215.50"></text></g><g><title>handle_mm_fault (3,938 samples, 0.05%)</title><rect x="35.9304%" y="1221" width="0.0485%" height="15" fill="rgb(222,207,29)" fg:x="2919443" fg:w="3938"/><text x="36.1804%" y="1231.50"></text></g><g><title>do_user_addr_fault (6,189 samples, 0.08%)</title><rect x="35.9029%" y="1237" width="0.0762%" height="15" fill="rgb(206,96,30)" fg:x="2917207" fg:w="6189"/><text x="36.1529%" y="1247.50"></text></g><g><title>exc_page_fault (7,547 samples, 0.09%)</title><rect x="35.9019%" y="1253" width="0.0929%" height="15" fill="rgb(218,138,4)" fg:x="2917121" fg:w="7547"/><text x="36.1519%" y="1263.50"></text></g><g><title>up_read (1,200 samples, 0.01%)</title><rect x="35.9800%" y="1237" width="0.0148%" height="15" fill="rgb(250,191,14)" fg:x="2923468" fg:w="1200"/><text x="36.2300%" y="1247.50"></text></g><g><title>asm_exc_page_fault (7,588 samples, 0.09%)</title><rect x="35.9014%" y="1269" width="0.0934%" height="15" fill="rgb(239,60,40)" fg:x="2917087" fg:w="7588"/><text x="36.1514%" y="1279.50"></text></g><g><title>tick_sched_handle (909 samples, 0.01%)</title><rect x="35.9978%" y="1173" width="0.0112%" height="15" fill="rgb(206,27,48)" fg:x="2924917" fg:w="909"/><text x="36.2478%" y="1183.50"></text></g><g><title>update_process_times (886 samples, 0.01%)</title><rect x="35.9981%" y="1157" width="0.0109%" height="15" fill="rgb(225,35,8)" fg:x="2924940" fg:w="886"/><text x="36.2481%" y="1167.50"></text></g><g><title>tick_sched_timer (1,018 samples, 0.01%)</title><rect x="35.9965%" y="1189" width="0.0125%" height="15" fill="rgb(250,213,24)" fg:x="2924811" fg:w="1018"/><text x="36.2465%" y="1199.50"></text></g><g><title>__hrtimer_run_queues (1,085 samples, 0.01%)</title><rect x="35.9957%" y="1205" width="0.0134%" height="15" fill="rgb(247,123,22)" fg:x="2924749" fg:w="1085"/><text x="36.2457%" y="1215.50"></text></g><g><title>hrtimer_interrupt (1,215 samples, 0.01%)</title><rect x="35.9952%" y="1221" width="0.0150%" height="15" fill="rgb(231,138,38)" fg:x="2924709" fg:w="1215"/><text x="36.2452%" y="1231.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1,239 samples, 0.02%)</title><rect x="35.9950%" y="1237" width="0.0152%" height="15" fill="rgb(231,145,46)" fg:x="2924687" fg:w="1239"/><text x="36.2450%" y="1247.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1,837 samples, 0.02%)</title><rect x="35.9948%" y="1269" width="0.0226%" height="15" fill="rgb(251,118,11)" fg:x="2924675" fg:w="1837"/><text x="36.2448%" y="1279.50"></text></g><g><title>sysvec_apic_timer_interrupt (1,825 samples, 0.02%)</title><rect x="35.9950%" y="1253" width="0.0225%" height="15" fill="rgb(217,147,25)" fg:x="2924687" fg:w="1825"/><text x="36.2450%" y="1263.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (1,615,314 samples, 19.88%)</title><rect x="16.1480%" y="1285" width="19.8801%" height="15" fill="rgb(247,81,37)" fg:x="1312070" fg:w="1615314"/><text x="16.3980%" y="1295.50">[cpuinfer_ext.cpython-310-x86_6..</text></g><g><title>__handle_mm_fault (873 samples, 0.01%)</title><rect x="36.0314%" y="1221" width="0.0107%" height="15" fill="rgb(209,12,38)" fg:x="2927644" fg:w="873"/><text x="36.2814%" y="1231.50"></text></g><g><title>handle_mm_fault (921 samples, 0.01%)</title><rect x="36.0312%" y="1237" width="0.0113%" height="15" fill="rgb(227,1,9)" fg:x="2927633" fg:w="921"/><text x="36.2812%" y="1247.50"></text></g><g><title>do_user_addr_fault (1,163 samples, 0.01%)</title><rect x="36.0283%" y="1253" width="0.0143%" height="15" fill="rgb(248,47,43)" fg:x="2927392" fg:w="1163"/><text x="36.2783%" y="1263.50"></text></g><g><title>exc_page_fault (1,303 samples, 0.02%)</title><rect x="36.0282%" y="1269" width="0.0160%" height="15" fill="rgb(221,10,30)" fg:x="2927390" fg:w="1303"/><text x="36.2782%" y="1279.50"></text></g><g><title>asm_exc_page_fault (1,305 samples, 0.02%)</title><rect x="36.0282%" y="1285" width="0.0161%" height="15" fill="rgb(210,229,1)" fg:x="2927389" fg:w="1305"/><text x="36.2782%" y="1295.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (1,714,064 samples, 21.10%)</title><rect x="14.9513%" y="1301" width="21.0955%" height="15" fill="rgb(222,148,37)" fg:x="1214836" fg:w="1714064"/><text x="15.2013%" y="1311.50">[cpuinfer_ext.cpython-310-x86_64-..</text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (1,719,199 samples, 21.16%)</title><rect x="14.8886%" y="1317" width="21.1587%" height="15" fill="rgb(234,67,33)" fg:x="1209740" fg:w="1719199"/><text x="15.1386%" y="1327.50">[cpuinfer_ext.cpython-310-x86_64-..</text></g><g><title>[libm.so.6] (843 samples, 0.01%)</title><rect x="36.0476%" y="1317" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="2928965" fg:w="843"/><text x="36.2976%" y="1327.50"></text></g><g><title>[libmvec.so.1] (12,108 samples, 0.15%)</title><rect x="36.0580%" y="1317" width="0.1490%" height="15" fill="rgb(247,138,52)" fg:x="2929808" fg:w="12108"/><text x="36.3080%" y="1327.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (1,770,595 samples, 21.79%)</title><rect x="14.4168%" y="1333" width="21.7912%" height="15" fill="rgb(213,79,30)" fg:x="1171407" fg:w="1770595"/><text x="14.6668%" y="1343.50">[cpuinfer_ext.cpython-310-x86_64-l..</text></g><g><title>[libm.so.6] (7,817 samples, 0.10%)</title><rect x="36.2098%" y="1333" width="0.0962%" height="15" fill="rgb(246,177,23)" fg:x="2942146" fg:w="7817"/><text x="36.4598%" y="1343.50"></text></g><g><title>down_read_trylock (12,551 samples, 0.15%)</title><rect x="36.3237%" y="1285" width="0.1545%" height="15" fill="rgb(230,62,27)" fg:x="2951399" fg:w="12551"/><text x="36.5737%" y="1295.50"></text></g><g><title>copy_page (1,719 samples, 0.02%)</title><rect x="36.6838%" y="1125" width="0.0212%" height="15" fill="rgb(216,154,8)" fg:x="2980656" fg:w="1719"/><text x="36.9338%" y="1135.50"></text></g><g><title>migrate_page (2,180 samples, 0.03%)</title><rect x="36.6837%" y="1141" width="0.0268%" height="15" fill="rgb(244,35,45)" fg:x="2980648" fg:w="2180"/><text x="36.9337%" y="1151.50"></text></g><g><title>move_to_new_page (2,190 samples, 0.03%)</title><rect x="36.6836%" y="1157" width="0.0270%" height="15" fill="rgb(251,115,12)" fg:x="2980641" fg:w="2190"/><text x="36.9336%" y="1167.50"></text></g><g><title>rmap_walk_anon (1,650 samples, 0.02%)</title><rect x="36.7144%" y="1141" width="0.0203%" height="15" fill="rgb(240,54,50)" fg:x="2983145" fg:w="1650"/><text x="36.9644%" y="1151.50"></text></g><g><title>remove_migration_pte (1,497 samples, 0.02%)</title><rect x="36.7163%" y="1125" width="0.0184%" height="15" fill="rgb(233,84,52)" fg:x="2983298" fg:w="1497"/><text x="36.9663%" y="1135.50"></text></g><g><title>page_vma_mapped_walk (1,341 samples, 0.02%)</title><rect x="36.7182%" y="1109" width="0.0165%" height="15" fill="rgb(207,117,47)" fg:x="2983454" fg:w="1341"/><text x="36.9682%" y="1119.50"></text></g><g><title>rmap_walk (1,774 samples, 0.02%)</title><rect x="36.7140%" y="1157" width="0.0218%" height="15" fill="rgb(249,43,39)" fg:x="2983107" fg:w="1774"/><text x="36.9640%" y="1167.50"></text></g><g><title>page_vma_mapped_walk (1,387 samples, 0.02%)</title><rect x="36.7491%" y="1093" width="0.0171%" height="15" fill="rgb(209,38,44)" fg:x="2985966" fg:w="1387"/><text x="36.9991%" y="1103.50"></text></g><g><title>rmap_walk_anon (2,905 samples, 0.04%)</title><rect x="36.7363%" y="1125" width="0.0358%" height="15" fill="rgb(236,212,23)" fg:x="2984921" fg:w="2905"/><text x="36.9863%" y="1135.50"></text></g><g><title>try_to_migrate_one (2,767 samples, 0.03%)</title><rect x="36.7380%" y="1109" width="0.0341%" height="15" fill="rgb(242,79,21)" fg:x="2985059" fg:w="2767"/><text x="36.9880%" y="1119.50"></text></g><g><title>rmap_walk (3,052 samples, 0.04%)</title><rect x="36.7359%" y="1141" width="0.0376%" height="15" fill="rgb(211,96,35)" fg:x="2984886" fg:w="3052"/><text x="36.9859%" y="1151.50"></text></g><g><title>try_to_migrate (3,056 samples, 0.04%)</title><rect x="36.7358%" y="1157" width="0.0376%" height="15" fill="rgb(253,215,40)" fg:x="2984883" fg:w="3056"/><text x="36.9858%" y="1167.50"></text></g><g><title>__unmap_and_move (8,436 samples, 0.10%)</title><rect x="36.6696%" y="1173" width="0.1038%" height="15" fill="rgb(211,81,21)" fg:x="2979505" fg:w="8436"/><text x="36.9196%" y="1183.50"></text></g><g><title>migrate_pages (9,718 samples, 0.12%)</title><rect x="36.6591%" y="1205" width="0.1196%" height="15" fill="rgb(208,190,38)" fg:x="2978646" fg:w="9718"/><text x="36.9091%" y="1215.50"></text></g><g><title>unmap_and_move (9,682 samples, 0.12%)</title><rect x="36.6595%" y="1189" width="0.1192%" height="15" fill="rgb(235,213,38)" fg:x="2978682" fg:w="9682"/><text x="36.9095%" y="1199.50"></text></g><g><title>migrate_misplaced_page (10,405 samples, 0.13%)</title><rect x="36.6508%" y="1221" width="0.1281%" height="15" fill="rgb(237,122,38)" fg:x="2977973" fg:w="10405"/><text x="36.9008%" y="1231.50"></text></g><g><title>do_numa_page (13,304 samples, 0.16%)</title><rect x="36.6304%" y="1237" width="0.1637%" height="15" fill="rgb(244,218,35)" fg:x="2976319" fg:w="13304"/><text x="36.8804%" y="1247.50"></text></g><g><title>handle_pte_fault (14,344 samples, 0.18%)</title><rect x="36.6191%" y="1253" width="0.1765%" height="15" fill="rgb(240,68,47)" fg:x="2975398" fg:w="14344"/><text x="36.8691%" y="1263.50"></text></g><g><title>__handle_mm_fault (24,667 samples, 0.30%)</title><rect x="36.4932%" y="1269" width="0.3036%" height="15" fill="rgb(210,16,53)" fg:x="2965168" fg:w="24667"/><text x="36.7432%" y="1279.50"></text></g><g><title>cgroup_rstat_updated (1,074 samples, 0.01%)</title><rect x="36.7974%" y="1269" width="0.0132%" height="15" fill="rgb(235,124,12)" fg:x="2989884" fg:w="1074"/><text x="37.0474%" y="1279.50"></text></g><g><title>handle_mm_fault (27,743 samples, 0.34%)</title><rect x="36.4796%" y="1285" width="0.3414%" height="15" fill="rgb(224,169,11)" fg:x="2964061" fg:w="27743"/><text x="36.7296%" y="1295.50"></text></g><g><title>do_user_addr_fault (40,745 samples, 0.50%)</title><rect x="36.3204%" y="1301" width="0.5015%" height="15" fill="rgb(250,166,2)" fg:x="2951127" fg:w="40745"/><text x="36.5704%" y="1311.50"></text></g><g><title>exc_page_fault (48,404 samples, 0.60%)</title><rect x="36.3126%" y="1317" width="0.5957%" height="15" fill="rgb(242,216,29)" fg:x="2950499" fg:w="48404"/><text x="36.5626%" y="1327.50"></text></g><g><title>up_read (6,770 samples, 0.08%)</title><rect x="36.8250%" y="1301" width="0.0833%" height="15" fill="rgb(230,116,27)" fg:x="2992133" fg:w="6770"/><text x="37.0750%" y="1311.50"></text></g><g><title>asm_exc_page_fault (48,578 samples, 0.60%)</title><rect x="36.3106%" y="1333" width="0.5979%" height="15" fill="rgb(228,99,48)" fg:x="2950334" fg:w="48578"/><text x="36.5606%" y="1343.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1,005 samples, 0.01%)</title><rect x="36.9085%" y="1333" width="0.0124%" height="15" fill="rgb(253,11,6)" fg:x="2998912" fg:w="1005"/><text x="37.1585%" y="1343.50"></text></g><g><title>sysvec_apic_timer_interrupt (1,003 samples, 0.01%)</title><rect x="36.9085%" y="1317" width="0.0123%" height="15" fill="rgb(247,143,39)" fg:x="2998914" fg:w="1003"/><text x="37.1585%" y="1327.50"></text></g><g><title>finish_task_switch.isra.0 (813 samples, 0.01%)</title><rect x="36.9623%" y="1157" width="0.0100%" height="15" fill="rgb(236,97,10)" fg:x="3003288" fg:w="813"/><text x="37.2123%" y="1167.50"></text></g><g><title>__schedule (2,285 samples, 0.03%)</title><rect x="36.9526%" y="1173" width="0.0281%" height="15" fill="rgb(233,208,19)" fg:x="3002495" fg:w="2285"/><text x="37.2026%" y="1183.50"></text></g><g><title>futex_wait_queue_me (2,403 samples, 0.03%)</title><rect x="36.9514%" y="1205" width="0.0296%" height="15" fill="rgb(216,164,2)" fg:x="3002401" fg:w="2403"/><text x="37.2014%" y="1215.50"></text></g><g><title>schedule (2,355 samples, 0.03%)</title><rect x="36.9520%" y="1189" width="0.0290%" height="15" fill="rgb(220,129,5)" fg:x="3002449" fg:w="2355"/><text x="37.2020%" y="1199.50"></text></g><g><title>futex_wait (3,346 samples, 0.04%)</title><rect x="36.9479%" y="1221" width="0.0412%" height="15" fill="rgb(242,17,10)" fg:x="3002117" fg:w="3346"/><text x="37.1979%" y="1231.50"></text></g><g><title>do_futex (3,357 samples, 0.04%)</title><rect x="36.9478%" y="1237" width="0.0413%" height="15" fill="rgb(242,107,0)" fg:x="3002107" fg:w="3357"/><text x="37.1978%" y="1247.50"></text></g><g><title>__x64_sys_futex (3,403 samples, 0.04%)</title><rect x="36.9472%" y="1253" width="0.0419%" height="15" fill="rgb(251,28,31)" fg:x="3002062" fg:w="3403"/><text x="37.1972%" y="1263.50"></text></g><g><title>do_syscall_64 (3,693 samples, 0.05%)</title><rect x="36.9437%" y="1285" width="0.0455%" height="15" fill="rgb(233,223,10)" fg:x="3001776" fg:w="3693"/><text x="37.1937%" y="1295.50"></text></g><g><title>x64_sys_call (3,416 samples, 0.04%)</title><rect x="36.9471%" y="1269" width="0.0420%" height="15" fill="rgb(215,21,27)" fg:x="3002053" fg:w="3416"/><text x="37.1971%" y="1279.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,779 samples, 0.05%)</title><rect x="36.9430%" y="1301" width="0.0465%" height="15" fill="rgb(232,23,21)" fg:x="3001715" fg:w="3779"/><text x="37.1930%" y="1311.50"></text></g><g><title>[libc.so.6] (4,052 samples, 0.05%)</title><rect x="36.9398%" y="1317" width="0.0499%" height="15" fill="rgb(244,5,23)" fg:x="3001455" fg:w="4052"/><text x="37.1898%" y="1327.50"></text></g><g><title>pthread_mutex_lock (4,877 samples, 0.06%)</title><rect x="36.9297%" y="1333" width="0.0600%" height="15" fill="rgb(226,81,46)" fg:x="3000635" fg:w="4877"/><text x="37.1797%" y="1343.50"></text></g><g><title>pthread_mutex_unlock (857 samples, 0.01%)</title><rect x="36.9897%" y="1333" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="3005512" fg:w="857"/><text x="37.2397%" y="1343.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (2,247,890 samples, 27.67%)</title><rect x="9.3549%" y="1349" width="27.6654%" height="15" fill="rgb(212,68,19)" fg:x="760111" fg:w="2247890"/><text x="9.6049%" y="1359.50">[cpuinfer_ext.cpython-310-x86_64-linux-gnu.s..</text></g><g><title>sync_regs (1,627 samples, 0.02%)</title><rect x="37.0003%" y="1333" width="0.0200%" height="15" fill="rgb(240,187,13)" fg:x="3006374" fg:w="1627"/><text x="37.2503%" y="1343.50"></text></g><g><title>futex_wake (1,292 samples, 0.02%)</title><rect x="37.0343%" y="1237" width="0.0159%" height="15" fill="rgb(223,113,26)" fg:x="3009135" fg:w="1292"/><text x="37.2843%" y="1247.50"></text></g><g><title>do_futex (1,332 samples, 0.02%)</title><rect x="37.0340%" y="1253" width="0.0164%" height="15" fill="rgb(206,192,2)" fg:x="3009113" fg:w="1332"/><text x="37.2840%" y="1263.50"></text></g><g><title>__x64_sys_futex (1,363 samples, 0.02%)</title><rect x="37.0338%" y="1269" width="0.0168%" height="15" fill="rgb(241,108,4)" fg:x="3009095" fg:w="1363"/><text x="37.2838%" y="1279.50"></text></g><g><title>do_syscall_64 (1,422 samples, 0.02%)</title><rect x="37.0331%" y="1301" width="0.0175%" height="15" fill="rgb(247,173,49)" fg:x="3009037" fg:w="1422"/><text x="37.2831%" y="1311.50"></text></g><g><title>x64_sys_call (1,369 samples, 0.02%)</title><rect x="37.0337%" y="1285" width="0.0168%" height="15" fill="rgb(224,114,35)" fg:x="3009090" fg:w="1369"/><text x="37.2837%" y="1295.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,480 samples, 0.02%)</title><rect x="37.0324%" y="1317" width="0.0182%" height="15" fill="rgb(245,159,27)" fg:x="3008984" fg:w="1480"/><text x="37.2824%" y="1327.50"></text></g><g><title>[libc.so.6] (1,535 samples, 0.02%)</title><rect x="37.0319%" y="1333" width="0.0189%" height="15" fill="rgb(245,172,44)" fg:x="3008942" fg:w="1535"/><text x="37.2819%" y="1343.50"></text></g><g><title>pthread_mutex_unlock (1,887 samples, 0.02%)</title><rect x="37.0276%" y="1349" width="0.0232%" height="15" fill="rgb(236,23,11)" fg:x="3008592" fg:w="1887"/><text x="37.2776%" y="1359.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (2,400,216 samples, 29.54%)</title><rect x="7.5108%" y="1365" width="29.5402%" height="15" fill="rgb(205,117,38)" fg:x="610271" fg:w="2400216"/><text x="7.7608%" y="1375.50">[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so]</text></g><g><title>__perf_event_task_sched_in (3,436 samples, 0.04%)</title><rect x="37.0881%" y="1173" width="0.0423%" height="15" fill="rgb(237,72,25)" fg:x="3013504" fg:w="3436"/><text x="37.3381%" y="1183.50"></text></g><g><title>x86_pmu_enable (2,608 samples, 0.03%)</title><rect x="37.0983%" y="1157" width="0.0321%" height="15" fill="rgb(244,70,9)" fg:x="3014332" fg:w="2608"/><text x="37.3483%" y="1167.50"></text></g><g><title>intel_pmu_enable_all (2,597 samples, 0.03%)</title><rect x="37.0984%" y="1141" width="0.0320%" height="15" fill="rgb(217,125,39)" fg:x="3014343" fg:w="2597"/><text x="37.3484%" y="1151.50"></text></g><g><title>native_write_msr (2,568 samples, 0.03%)</title><rect x="37.0987%" y="1125" width="0.0316%" height="15" fill="rgb(235,36,10)" fg:x="3014372" fg:w="2568"/><text x="37.3487%" y="1135.50"></text></g><g><title>finish_task_switch.isra.0 (3,875 samples, 0.05%)</title><rect x="37.0843%" y="1189" width="0.0477%" height="15" fill="rgb(251,123,47)" fg:x="3013202" fg:w="3875"/><text x="37.3343%" y="1199.50"></text></g><g><title>__schedule (5,863 samples, 0.07%)</title><rect x="37.0738%" y="1205" width="0.0722%" height="15" fill="rgb(221,13,13)" fg:x="3012348" fg:w="5863"/><text x="37.3238%" y="1215.50"></text></g><g><title>do_nanosleep (6,517 samples, 0.08%)</title><rect x="37.0660%" y="1237" width="0.0802%" height="15" fill="rgb(238,131,9)" fg:x="3011715" fg:w="6517"/><text x="37.3160%" y="1247.50"></text></g><g><title>schedule (5,904 samples, 0.07%)</title><rect x="37.0736%" y="1221" width="0.0727%" height="15" fill="rgb(211,50,8)" fg:x="3012328" fg:w="5904"/><text x="37.3236%" y="1231.50"></text></g><g><title>common_nsleep (6,624 samples, 0.08%)</title><rect x="37.0655%" y="1269" width="0.0815%" height="15" fill="rgb(245,182,24)" fg:x="3011672" fg:w="6624"/><text x="37.3155%" y="1279.50"></text></g><g><title>hrtimer_nanosleep (6,616 samples, 0.08%)</title><rect x="37.0656%" y="1253" width="0.0814%" height="15" fill="rgb(242,14,37)" fg:x="3011680" fg:w="6616"/><text x="37.3156%" y="1263.50"></text></g><g><title>__x64_sys_clock_nanosleep (6,822 samples, 0.08%)</title><rect x="37.0646%" y="1285" width="0.0840%" height="15" fill="rgb(246,228,12)" fg:x="3011594" fg:w="6822"/><text x="37.3146%" y="1295.50"></text></g><g><title>do_syscall_64 (7,361 samples, 0.09%)</title><rect x="37.0582%" y="1317" width="0.0906%" height="15" fill="rgb(213,55,15)" fg:x="3011076" fg:w="7361"/><text x="37.3082%" y="1327.50"></text></g><g><title>x64_sys_call (6,856 samples, 0.08%)</title><rect x="37.0644%" y="1301" width="0.0844%" height="15" fill="rgb(209,9,3)" fg:x="3011581" fg:w="6856"/><text x="37.3144%" y="1311.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7,589 samples, 0.09%)</title><rect x="37.0560%" y="1333" width="0.0934%" height="15" fill="rgb(230,59,30)" fg:x="3010895" fg:w="7589"/><text x="37.3060%" y="1343.50"></text></g><g><title>__nanosleep (8,040 samples, 0.10%)</title><rect x="37.0509%" y="1365" width="0.0990%" height="15" fill="rgb(209,121,21)" fg:x="3010488" fg:w="8040"/><text x="37.3009%" y="1375.50"></text></g><g><title>clock_nanosleep (7,937 samples, 0.10%)</title><rect x="37.0522%" y="1349" width="0.0977%" height="15" fill="rgb(220,109,13)" fg:x="3010591" fg:w="7937"/><text x="37.3022%" y="1359.50"></text></g><g><title>pthread_mutex_lock (74,777 samples, 0.92%)</title><rect x="37.1565%" y="1365" width="0.9203%" height="15" fill="rgb(232,18,1)" fg:x="3019061" fg:w="74777"/><text x="37.4065%" y="1375.50"></text></g><g><title>pthread_mutex_unlock (81,737 samples, 1.01%)</title><rect x="38.0768%" y="1365" width="1.0060%" height="15" fill="rgb(215,41,42)" fg:x="3093838" fg:w="81737"/><text x="38.3268%" y="1375.50"></text></g><g><title>task_tick_fair (1,265 samples, 0.02%)</title><rect x="90.2923%" y="1157" width="0.0156%" height="15" fill="rgb(224,123,36)" fg:x="7336486" fg:w="1265"/><text x="90.5423%" y="1167.50"></text></g><g><title>scheduler_tick (1,737 samples, 0.02%)</title><rect x="90.2879%" y="1173" width="0.0214%" height="15" fill="rgb(240,125,3)" fg:x="7336132" fg:w="1737"/><text x="90.5379%" y="1183.50"></text></g><g><title>tick_sched_handle (2,101 samples, 0.03%)</title><rect x="90.2835%" y="1205" width="0.0259%" height="15" fill="rgb(205,98,50)" fg:x="7335772" fg:w="2101"/><text x="90.5335%" y="1215.50"></text></g><g><title>update_process_times (2,061 samples, 0.03%)</title><rect x="90.2840%" y="1189" width="0.0254%" height="15" fill="rgb(205,185,37)" fg:x="7335812" fg:w="2061"/><text x="90.5340%" y="1199.50"></text></g><g><title>tick_sched_timer (2,262 samples, 0.03%)</title><rect x="90.2816%" y="1221" width="0.0278%" height="15" fill="rgb(238,207,15)" fg:x="7335619" fg:w="2262"/><text x="90.5316%" y="1231.50"></text></g><g><title>__hrtimer_run_queues (2,355 samples, 0.03%)</title><rect x="90.2805%" y="1237" width="0.0290%" height="15" fill="rgb(213,199,42)" fg:x="7335531" fg:w="2355"/><text x="90.5305%" y="1247.50"></text></g><g><title>hrtimer_interrupt (2,598 samples, 0.03%)</title><rect x="90.2800%" y="1253" width="0.0320%" height="15" fill="rgb(235,201,11)" fg:x="7335494" fg:w="2598"/><text x="90.5300%" y="1263.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2,628 samples, 0.03%)</title><rect x="90.2797%" y="1269" width="0.0323%" height="15" fill="rgb(207,46,11)" fg:x="7335465" fg:w="2628"/><text x="90.5297%" y="1279.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3,539 samples, 0.04%)</title><rect x="90.2793%" y="1301" width="0.0436%" height="15" fill="rgb(241,35,35)" fg:x="7335435" fg:w="3539"/><text x="90.5293%" y="1311.50"></text></g><g><title>sysvec_apic_timer_interrupt (3,515 samples, 0.04%)</title><rect x="90.2796%" y="1285" width="0.0433%" height="15" fill="rgb(243,32,47)" fg:x="7335459" fg:w="3515"/><text x="90.5296%" y="1295.50"></text></g><g><title>[[vdso]] (2,813,484 samples, 34.63%)</title><rect x="55.7029%" y="1317" width="34.6264%" height="15" fill="rgb(247,202,23)" fg:x="4526009" fg:w="2813484"/><text x="55.9529%" y="1327.50">[[vdso]]</text></g><g><title>tick_sched_timer (832 samples, 0.01%)</title><rect x="90.3307%" y="1237" width="0.0102%" height="15" fill="rgb(219,102,11)" fg:x="7339608" fg:w="832"/><text x="90.5807%" y="1247.50"></text></g><g><title>__hrtimer_run_queues (867 samples, 0.01%)</title><rect x="90.3303%" y="1253" width="0.0107%" height="15" fill="rgb(243,110,44)" fg:x="7339575" fg:w="867"/><text x="90.5803%" y="1263.50"></text></g><g><title>hrtimer_interrupt (970 samples, 0.01%)</title><rect x="90.3301%" y="1269" width="0.0119%" height="15" fill="rgb(222,74,54)" fg:x="7339557" fg:w="970"/><text x="90.5801%" y="1279.50"></text></g><g><title>__sysvec_apic_timer_interrupt (981 samples, 0.01%)</title><rect x="90.3299%" y="1285" width="0.0121%" height="15" fill="rgb(216,99,12)" fg:x="7339547" fg:w="981"/><text x="90.5799%" y="1295.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1,269 samples, 0.02%)</title><rect x="90.3298%" y="1317" width="0.0156%" height="15" fill="rgb(226,22,26)" fg:x="7339538" fg:w="1269"/><text x="90.5798%" y="1327.50"></text></g><g><title>sysvec_apic_timer_interrupt (1,261 samples, 0.02%)</title><rect x="90.3299%" y="1301" width="0.0155%" height="15" fill="rgb(217,163,10)" fg:x="7339546" fg:w="1261"/><text x="90.5799%" y="1311.50"></text></g><g><title>[[vdso]] (3,980,639 samples, 48.99%)</title><rect x="41.3574%" y="1333" width="48.9909%" height="15" fill="rgb(213,25,53)" fg:x="3360402" fg:w="3980639"/><text x="41.6074%" y="1343.50">[[vdso]]</text></g><g><title>__vdso_clock_gettime (91,283 samples, 1.12%)</title><rect x="90.3483%" y="1333" width="1.1234%" height="15" fill="rgb(252,105,26)" fg:x="7341042" fg:w="91283"/><text x="90.5983%" y="1343.50"></text></g><g><title>clock_gettime (4,164,554 samples, 51.25%)</title><rect x="40.2204%" y="1349" width="51.2544%" height="15" fill="rgb(220,39,43)" fg:x="3268015" fg:w="4164554"/><text x="40.4704%" y="1359.50">clock_gettime</text></g><g><title>clock_gettime@plt (92,168 samples, 1.13%)</title><rect x="91.4748%" y="1349" width="1.1343%" height="15" fill="rgb(229,68,48)" fg:x="7432569" fg:w="92168"/><text x="91.7248%" y="1359.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (4,349,181 samples, 53.53%)</title><rect x="39.0827%" y="1365" width="53.5266%" height="15" fill="rgb(252,8,32)" fg:x="3175575" fg:w="4349181"/><text x="39.3327%" y="1375.50">std::chrono::_V2::steady_clock::now</text></g><g><title>execute_native_thread_routine (7,167,354 samples, 88.21%)</title><rect x="4.3988%" y="1397" width="88.2107%" height="15" fill="rgb(223,20,43)" fg:x="357418" fg:w="7167354"/><text x="4.6488%" y="1407.50">execute_native_thread_routine</text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (7,167,354 samples, 88.21%)</title><rect x="4.3988%" y="1381" width="88.2107%" height="15" fill="rgb(229,81,49)" fg:x="357418" fg:w="7167354"/><text x="4.6488%" y="1391.50">[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so]</text></g><g><title>[libc.so.6] (7,240,117 samples, 89.11%)</title><rect x="3.5041%" y="1413" width="89.1062%" height="15" fill="rgb(236,28,36)" fg:x="284716" fg:w="7240117"/><text x="3.7541%" y="1423.50">[libc.so.6]</text></g><g><title>[libc.so.6] (7,240,135 samples, 89.11%)</title><rect x="3.5040%" y="1429" width="89.1064%" height="15" fill="rgb(249,185,26)" fg:x="284713" fg:w="7240135"/><text x="3.7540%" y="1439.50">[libc.so.6]</text></g><g><title>[libcuda.so.560.35.03] (3,079 samples, 0.04%)</title><rect x="92.6105%" y="1429" width="0.0379%" height="15" fill="rgb(249,174,33)" fg:x="7524851" fg:w="3079"/><text x="92.8605%" y="1439.50"></text></g><g><title>[[vdso]] (90,653 samples, 1.12%)</title><rect x="92.6521%" y="1413" width="1.1157%" height="15" fill="rgb(233,201,37)" fg:x="7528226" fg:w="90653"/><text x="92.9021%" y="1423.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (3,758 samples, 0.05%)</title><rect x="93.7677%" y="1413" width="0.0463%" height="15" fill="rgb(221,78,26)" fg:x="7618879" fg:w="3758"/><text x="94.0177%" y="1423.50"></text></g><g><title>[libcuda.so.560.35.03] (4,433 samples, 0.05%)</title><rect x="93.8198%" y="1413" width="0.0546%" height="15" fill="rgb(250,127,30)" fg:x="7623109" fg:w="4433"/><text x="94.0698%" y="1423.50"></text></g><g><title>[libmvec.so.1] (1,362 samples, 0.02%)</title><rect x="93.8761%" y="1413" width="0.0168%" height="15" fill="rgb(230,49,44)" fg:x="7627681" fg:w="1362"/><text x="94.1261%" y="1423.50"></text></g><g><title>[libcuda.so.560.35.03] (27,470 samples, 0.34%)</title><rect x="94.5041%" y="901" width="0.3381%" height="15" fill="rgb(229,67,23)" fg:x="7678707" fg:w="27470"/><text x="94.7541%" y="911.50"></text></g><g><title>[libcuda.so.560.35.03] (40,266 samples, 0.50%)</title><rect x="94.3467%" y="917" width="0.4956%" height="15" fill="rgb(249,83,47)" fg:x="7665920" fg:w="40266"/><text x="94.5967%" y="927.50"></text></g><g><title>[libcuda.so.560.35.03] (55,654 samples, 0.68%)</title><rect x="94.1577%" y="933" width="0.6849%" height="15" fill="rgb(215,43,3)" fg:x="7650566" fg:w="55654"/><text x="94.4077%" y="943.50"></text></g><g><title>[[vdso]] (5,697 samples, 0.07%)</title><rect x="94.8702%" y="901" width="0.0701%" height="15" fill="rgb(238,154,13)" fg:x="7708459" fg:w="5697"/><text x="95.1202%" y="911.50"></text></g><g><title>[[vdso]] (7,753 samples, 0.10%)</title><rect x="94.8449%" y="917" width="0.0954%" height="15" fill="rgb(219,56,2)" fg:x="7706404" fg:w="7753"/><text x="95.0949%" y="927.50"></text></g><g><title>clock_gettime (8,068 samples, 0.10%)</title><rect x="94.8430%" y="933" width="0.0993%" height="15" fill="rgb(233,0,4)" fg:x="7706243" fg:w="8068"/><text x="95.0930%" y="943.50"></text></g><g><title>[libcuda.so.560.35.03] (77,974 samples, 0.96%)</title><rect x="93.9885%" y="949" width="0.9596%" height="15" fill="rgb(235,30,7)" fg:x="7636816" fg:w="77974"/><text x="94.2385%" y="959.50"></text></g><g><title>[libcuda.so.560.35.03] (83,932 samples, 1.03%)</title><rect x="93.9153%" y="965" width="1.0330%" height="15" fill="rgb(250,79,13)" fg:x="7630872" fg:w="83932"/><text x="94.1653%" y="975.50"></text></g><g><title>[libcuda.so.560.35.03] (83,935 samples, 1.03%)</title><rect x="93.9153%" y="981" width="1.0330%" height="15" fill="rgb(211,146,34)" fg:x="7630871" fg:w="83935"/><text x="94.1653%" y="991.50"></text></g><g><title>[libcuda.so.560.35.03] (83,967 samples, 1.03%)</title><rect x="93.9150%" y="1013" width="1.0334%" height="15" fill="rgb(228,22,38)" fg:x="7630840" fg:w="83967"/><text x="94.1650%" y="1023.50"></text></g><g><title>[libcuda.so.560.35.03] (83,967 samples, 1.03%)</title><rect x="93.9150%" y="997" width="1.0334%" height="15" fill="rgb(235,168,5)" fg:x="7630840" fg:w="83967"/><text x="94.1650%" y="1007.50"></text></g><g><title>c10::cuda::device_synchronize (83,969 samples, 1.03%)</title><rect x="93.9149%" y="1061" width="1.0334%" height="15" fill="rgb(221,155,16)" fg:x="7630839" fg:w="83969"/><text x="94.1649%" y="1071.50"></text></g><g><title>cudaDeviceSynchronize (83,969 samples, 1.03%)</title><rect x="93.9149%" y="1045" width="1.0334%" height="15" fill="rgb(215,215,53)" fg:x="7630839" fg:w="83969"/><text x="94.1649%" y="1055.50"></text></g><g><title>[libcudart.so.12] (83,968 samples, 1.03%)</title><rect x="93.9150%" y="1029" width="1.0334%" height="15" fill="rgb(223,4,10)" fg:x="7630840" fg:w="83968"/><text x="94.1650%" y="1039.50"></text></g><g><title>cfunction_vectorcall_NOARGS (83,973 samples, 1.03%)</title><rect x="93.9149%" y="1093" width="1.0335%" height="15" fill="rgb(234,103,6)" fg:x="7630836" fg:w="83973"/><text x="94.1649%" y="1103.50"></text></g><g><title>THCPModule_cudaSynchronize (83,972 samples, 1.03%)</title><rect x="93.9149%" y="1077" width="1.0335%" height="15" fill="rgb(227,97,0)" fg:x="7630837" fg:w="83972"/><text x="94.1649%" y="1087.50"></text></g><g><title>[libcuda.so.560.35.03] (813 samples, 0.01%)</title><rect x="94.9558%" y="901" width="0.0100%" height="15" fill="rgb(234,150,53)" fg:x="7715414" fg:w="813"/><text x="95.2058%" y="911.50"></text></g><g><title>[libcuda.so.560.35.03] (1,212 samples, 0.01%)</title><rect x="94.9528%" y="917" width="0.0149%" height="15" fill="rgb(228,201,54)" fg:x="7715169" fg:w="1212"/><text x="95.2028%" y="927.50"></text></g><g><title>cudaGraphLaunch (1,565 samples, 0.02%)</title><rect x="94.9489%" y="981" width="0.0193%" height="15" fill="rgb(222,22,37)" fg:x="7714853" fg:w="1565"/><text x="95.1989%" y="991.50"></text></g><g><title>[libcudart.so.12] (1,565 samples, 0.02%)</title><rect x="94.9489%" y="965" width="0.0193%" height="15" fill="rgb(237,53,32)" fg:x="7714853" fg:w="1565"/><text x="95.1989%" y="975.50"></text></g><g><title>[libcuda.so.560.35.03] (1,565 samples, 0.02%)</title><rect x="94.9489%" y="949" width="0.0193%" height="15" fill="rgb(233,25,53)" fg:x="7714853" fg:w="1565"/><text x="95.1989%" y="959.50"></text></g><g><title>[libcuda.so.560.35.03] (1,565 samples, 0.02%)</title><rect x="94.9489%" y="933" width="0.0193%" height="15" fill="rgb(210,40,34)" fg:x="7714853" fg:w="1565"/><text x="95.1989%" y="943.50"></text></g><g><title>pybind11::cpp_function::initialize&lt;torch::detail::wrap_pybind_function_impl_&lt;void (at::cuda::CUDAGraph::*)(), 0ul, true&gt;(void (at::cuda::CUDAGraph::*&amp;&amp;)(), std::integer_sequence&lt;unsigned long, 0ul&gt;, std::integral_constant&lt;bool, true&gt;)::{lambda(at::cuda::CUDAGraph&amp;)#1}, void, at::cuda::CUDAGraph&amp;, pybind11::name, pybind11::is_method, pybind11::sibling&gt; (1,593 samples, 0.02%)</title><rect x="94.9486%" y="1029" width="0.0196%" height="15" fill="rgb(241,220,44)" fg:x="7714826" fg:w="1593"/><text x="95.1986%" y="1039.50"></text></g><g><title>torch::detail::wrap_pybind_function_impl_&lt;void (at::cuda::CUDAGraph::*)(), 0ul, true&gt; (1,590 samples, 0.02%)</title><rect x="94.9486%" y="1013" width="0.0196%" height="15" fill="rgb(235,28,35)" fg:x="7714829" fg:w="1590"/><text x="95.1986%" y="1023.50"></text></g><g><title>at::cuda::CUDAGraph::replay (1,589 samples, 0.02%)</title><rect x="94.9486%" y="997" width="0.0196%" height="15" fill="rgb(210,56,17)" fg:x="7714830" fg:w="1589"/><text x="95.1986%" y="1007.50"></text></g><g><title>cfunction_call (1,596 samples, 0.02%)</title><rect x="94.9486%" y="1061" width="0.0196%" height="15" fill="rgb(224,130,29)" fg:x="7714824" fg:w="1596"/><text x="95.1986%" y="1071.50"></text></g><g><title>pybind11::cpp_function::dispatcher (1,596 samples, 0.02%)</title><rect x="94.9486%" y="1045" width="0.0196%" height="15" fill="rgb(235,212,8)" fg:x="7714824" fg:w="1596"/><text x="95.1986%" y="1055.50"></text></g><g><title>_PyEval_EvalFrameDefault (85,648 samples, 1.05%)</title><rect x="93.9141%" y="1109" width="1.0541%" height="15" fill="rgb(223,33,50)" fg:x="7630774" fg:w="85648"/><text x="94.1641%" y="1119.50"></text></g><g><title>method_vectorcall (1,612 samples, 0.02%)</title><rect x="94.9484%" y="1093" width="0.0198%" height="15" fill="rgb(219,149,13)" fg:x="7714810" fg:w="1612"/><text x="95.1984%" y="1103.50"></text></g><g><title>_PyObject_MakeTpCall (1,598 samples, 0.02%)</title><rect x="94.9486%" y="1077" width="0.0197%" height="15" fill="rgb(250,156,29)" fg:x="7714824" fg:w="1598"/><text x="95.1986%" y="1087.50"></text></g><g><title>_PyFunction_Vectorcall (85,651 samples, 1.05%)</title><rect x="93.9141%" y="1125" width="1.0541%" height="15" fill="rgb(216,193,19)" fg:x="7630774" fg:w="85651"/><text x="94.1641%" y="1135.50"></text></g><g><title>_PyEval_EvalFrameDefault (85,805 samples, 1.06%)</title><rect x="93.9139%" y="1141" width="1.0560%" height="15" fill="rgb(216,135,14)" fg:x="7630756" fg:w="85805"/><text x="94.1639%" y="1151.50"></text></g><g><title>_PyEval_EvalFrameDefault (86,502 samples, 1.06%)</title><rect x="93.9055%" y="1173" width="1.0646%" height="15" fill="rgb(241,47,5)" fg:x="7630068" fg:w="86502"/><text x="94.1555%" y="1183.50"></text></g><g><title>method_vectorcall (85,814 samples, 1.06%)</title><rect x="93.9139%" y="1157" width="1.0561%" height="15" fill="rgb(233,42,35)" fg:x="7630756" fg:w="85814"/><text x="94.1639%" y="1167.50"></text></g><g><title>_PyObject_Call_Prepend (86,504 samples, 1.06%)</title><rect x="93.9054%" y="1205" width="1.0646%" height="15" fill="rgb(231,13,6)" fg:x="7630067" fg:w="86504"/><text x="94.1554%" y="1215.50"></text></g><g><title>_PyObject_FastCallDictTstate (86,504 samples, 1.06%)</title><rect x="93.9054%" y="1189" width="1.0646%" height="15" fill="rgb(207,181,40)" fg:x="7630067" fg:w="86504"/><text x="94.1554%" y="1199.50"></text></g><g><title>_PyObject_MakeTpCall (86,733 samples, 1.07%)</title><rect x="93.9026%" y="1237" width="1.0674%" height="15" fill="rgb(254,173,49)" fg:x="7629839" fg:w="86733"/><text x="94.1526%" y="1247.50"></text></g><g><title>slot_tp_call (86,505 samples, 1.06%)</title><rect x="93.9054%" y="1221" width="1.0646%" height="15" fill="rgb(221,1,38)" fg:x="7630067" fg:w="86505"/><text x="94.1554%" y="1231.50"></text></g><g><title>_PyEval_EvalFrameDefault (87,313 samples, 1.07%)</title><rect x="93.8963%" y="1253" width="1.0746%" height="15" fill="rgb(206,124,46)" fg:x="7629326" fg:w="87313"/><text x="94.1463%" y="1263.50"></text></g><g><title>_PyFunction_Vectorcall (87,318 samples, 1.07%)</title><rect x="93.8963%" y="1269" width="1.0746%" height="15" fill="rgb(249,21,11)" fg:x="7629325" fg:w="87318"/><text x="94.1463%" y="1279.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,155 samples, 0.03%)</title><rect x="94.9756%" y="389" width="0.0265%" height="15" fill="rgb(222,201,40)" fg:x="7717023" fg:w="2155"/><text x="95.2256%" y="399.50"></text></g><g><title>method_vectorcall (2,151 samples, 0.03%)</title><rect x="94.9757%" y="373" width="0.0265%" height="15" fill="rgb(235,61,29)" fg:x="7717027" fg:w="2151"/><text x="95.2257%" y="383.50"></text></g><g><title>_PyObject_MakeTpCall (2,151 samples, 0.03%)</title><rect x="94.9757%" y="357" width="0.0265%" height="15" fill="rgb(219,207,3)" fg:x="7717027" fg:w="2151"/><text x="95.2257%" y="367.50"></text></g><g><title>cfunction_call (2,151 samples, 0.03%)</title><rect x="94.9757%" y="341" width="0.0265%" height="15" fill="rgb(222,56,46)" fg:x="7717027" fg:w="2151"/><text x="95.2257%" y="351.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (2,151 samples, 0.03%)</title><rect x="94.9757%" y="325" width="0.0265%" height="15" fill="rgb(239,76,54)" fg:x="7717027" fg:w="2151"/><text x="95.2257%" y="335.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (2,150 samples, 0.03%)</title><rect x="94.9757%" y="309" width="0.0265%" height="15" fill="rgb(231,124,27)" fg:x="7717028" fg:w="2150"/><text x="95.2257%" y="319.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (2,148 samples, 0.03%)</title><rect x="94.9757%" y="293" width="0.0264%" height="15" fill="rgb(249,195,6)" fg:x="7717030" fg:w="2148"/><text x="95.2257%" y="303.50"></text></g><g><title>_PyFunction_Vectorcall (2,157 samples, 0.03%)</title><rect x="94.9756%" y="405" width="0.0265%" height="15" fill="rgb(237,174,47)" fg:x="7717023" fg:w="2157"/><text x="95.2256%" y="415.50"></text></g><g><title>[libcuda.so.560.35.03] (10,739 samples, 0.13%)</title><rect x="95.1457%" y="37" width="0.1322%" height="15" fill="rgb(206,201,31)" fg:x="7730845" fg:w="10739"/><text x="95.3957%" y="47.50"></text></g><g><title>[libcuda.so.560.35.03] (15,054 samples, 0.19%)</title><rect x="95.0927%" y="53" width="0.1853%" height="15" fill="rgb(231,57,52)" fg:x="7726532" fg:w="15054"/><text x="95.3427%" y="63.50"></text></g><g><title>[libcuda.so.560.35.03] (17,431 samples, 0.21%)</title><rect x="95.0635%" y="69" width="0.2145%" height="15" fill="rgb(248,177,22)" fg:x="7724161" fg:w="17431"/><text x="95.3135%" y="79.50"></text></g><g><title>[[vdso]] (2,624 samples, 0.03%)</title><rect x="95.2788%" y="53" width="0.0323%" height="15" fill="rgb(215,211,37)" fg:x="7741656" fg:w="2624"/><text x="95.5288%" y="63.50"></text></g><g><title>[[vdso]] (1,934 samples, 0.02%)</title><rect x="95.2873%" y="37" width="0.0238%" height="15" fill="rgb(241,128,51)" fg:x="7742346" fg:w="1934"/><text x="95.5373%" y="47.50"></text></g><g><title>clock_gettime (2,738 samples, 0.03%)</title><rect x="95.2781%" y="69" width="0.0337%" height="15" fill="rgb(227,165,31)" fg:x="7741598" fg:w="2738"/><text x="95.5281%" y="79.50"></text></g><g><title>[libcuda.so.560.35.03] (23,180 samples, 0.29%)</title><rect x="95.0285%" y="85" width="0.2853%" height="15" fill="rgb(228,167,24)" fg:x="7721321" fg:w="23180"/><text x="95.2785%" y="95.50"></text></g><g><title>at::_ops::_local_scalar_dense::redispatch (25,281 samples, 0.31%)</title><rect x="95.0028%" y="277" width="0.3111%" height="15" fill="rgb(228,143,12)" fg:x="7719228" fg:w="25281"/><text x="95.2528%" y="287.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (at::Tensor const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA___local_scalar_dense&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;at::Tensor const&amp;&gt; &gt;, c10::Scalar (at::Tensor const&amp;)&gt;::call (25,281 samples, 0.31%)</title><rect x="95.0028%" y="261" width="0.3111%" height="15" fill="rgb(249,149,8)" fg:x="7719228" fg:w="25281"/><text x="95.2528%" y="271.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA___local_scalar_dense (25,281 samples, 0.31%)</title><rect x="95.0028%" y="245" width="0.3111%" height="15" fill="rgb(243,35,44)" fg:x="7719228" fg:w="25281"/><text x="95.2528%" y="255.50"></text></g><g><title>at::native::_local_scalar_dense_cuda (25,281 samples, 0.31%)</title><rect x="95.0028%" y="229" width="0.3111%" height="15" fill="rgb(246,89,9)" fg:x="7719228" fg:w="25281"/><text x="95.2528%" y="239.50"></text></g><g><title>at::native::_local_scalar_dense_cuda (25,281 samples, 0.31%)</title><rect x="95.0028%" y="213" width="0.3111%" height="15" fill="rgb(233,213,13)" fg:x="7719228" fg:w="25281"/><text x="95.2528%" y="223.50"></text></g><g><title>c10::cuda::memcpy_and_sync (25,277 samples, 0.31%)</title><rect x="95.0028%" y="197" width="0.3111%" height="15" fill="rgb(233,141,41)" fg:x="7719232" fg:w="25277"/><text x="95.2528%" y="207.50"></text></g><g><title>cudaStreamSynchronize (25,276 samples, 0.31%)</title><rect x="95.0028%" y="181" width="0.3111%" height="15" fill="rgb(239,167,4)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="191.50"></text></g><g><title>[libcudart.so.12] (25,276 samples, 0.31%)</title><rect x="95.0028%" y="165" width="0.3111%" height="15" fill="rgb(209,217,16)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="175.50"></text></g><g><title>[libcuda.so.560.35.03] (25,276 samples, 0.31%)</title><rect x="95.0028%" y="149" width="0.3111%" height="15" fill="rgb(219,88,35)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="159.50"></text></g><g><title>[libcuda.so.560.35.03] (25,276 samples, 0.31%)</title><rect x="95.0028%" y="133" width="0.3111%" height="15" fill="rgb(220,193,23)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="143.50"></text></g><g><title>[libcuda.so.560.35.03] (25,276 samples, 0.31%)</title><rect x="95.0028%" y="117" width="0.3111%" height="15" fill="rgb(230,90,52)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="127.50"></text></g><g><title>[libcuda.so.560.35.03] (25,276 samples, 0.31%)</title><rect x="95.0028%" y="101" width="0.3111%" height="15" fill="rgb(252,106,19)" fg:x="7719233" fg:w="25276"/><text x="95.2528%" y="111.50"></text></g><g><title>at::_ops::item::call (25,284 samples, 0.31%)</title><rect x="95.0027%" y="373" width="0.3112%" height="15" fill="rgb(206,74,20)" fg:x="7719226" fg:w="25284"/><text x="95.2527%" y="383.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (at::Tensor const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__item&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;at::Tensor const&amp;&gt; &gt;, c10::Scalar (at::Tensor const&amp;)&gt;::call (25,284 samples, 0.31%)</title><rect x="95.0027%" y="357" width="0.3112%" height="15" fill="rgb(230,138,44)" fg:x="7719226" fg:w="25284"/><text x="95.2527%" y="367.50"></text></g><g><title>at::native::item (25,284 samples, 0.31%)</title><rect x="95.0027%" y="341" width="0.3112%" height="15" fill="rgb(235,182,43)" fg:x="7719226" fg:w="25284"/><text x="95.2527%" y="351.50"></text></g><g><title>at::_ops::_local_scalar_dense::call (25,284 samples, 0.31%)</title><rect x="95.0027%" y="325" width="0.3112%" height="15" fill="rgb(242,16,51)" fg:x="7719226" fg:w="25284"/><text x="95.2527%" y="335.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (c10::DispatchKeySet, at::Tensor const&amp;), &amp;torch::autograd::VariableType::(anonymous namespace)::_local_scalar_dense&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;c10::DispatchKeySet, at::Tensor const&amp;&gt; &gt;, c10::Scalar (c10::DispatchKeySet, at::Tensor const&amp;)&gt;::call (25,282 samples, 0.31%)</title><rect x="95.0028%" y="309" width="0.3112%" height="15" fill="rgb(248,9,4)" fg:x="7719228" fg:w="25282"/><text x="95.2528%" y="319.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::_local_scalar_dense (25,282 samples, 0.31%)</title><rect x="95.0028%" y="293" width="0.3112%" height="15" fill="rgb(210,31,22)" fg:x="7719228" fg:w="25282"/><text x="95.2528%" y="303.50"></text></g><g><title>method_vectorcall_NOARGS (25,287 samples, 0.31%)</title><rect x="95.0027%" y="405" width="0.3112%" height="15" fill="rgb(239,54,39)" fg:x="7719225" fg:w="25287"/><text x="95.2527%" y="415.50"></text></g><g><title>torch::autograd::THPVariable_item (25,286 samples, 0.31%)</title><rect x="95.0027%" y="389" width="0.3112%" height="15" fill="rgb(230,99,41)" fg:x="7719226" fg:w="25286"/><text x="95.2527%" y="399.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,609 samples, 0.34%)</title><rect x="94.9752%" y="421" width="0.3398%" height="15" fill="rgb(253,106,12)" fg:x="7716988" fg:w="27609"/><text x="95.2252%" y="431.50"></text></g><g><title>_PyFunction_Vectorcall (27,611 samples, 0.34%)</title><rect x="94.9752%" y="437" width="0.3398%" height="15" fill="rgb(213,46,41)" fg:x="7716987" fg:w="27611"/><text x="95.2252%" y="447.50"></text></g><g><title>method_vectorcall (27,638 samples, 0.34%)</title><rect x="94.9749%" y="469" width="0.3401%" height="15" fill="rgb(215,133,35)" fg:x="7716963" fg:w="27638"/><text x="95.2249%" y="479.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,638 samples, 0.34%)</title><rect x="94.9749%" y="453" width="0.3401%" height="15" fill="rgb(213,28,5)" fg:x="7716963" fg:w="27638"/><text x="95.2249%" y="463.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,756 samples, 0.34%)</title><rect x="94.9737%" y="485" width="0.3416%" height="15" fill="rgb(215,77,49)" fg:x="7716868" fg:w="27756"/><text x="95.2237%" y="495.50"></text></g><g><title>PyObject_Call (27,766 samples, 0.34%)</title><rect x="94.9737%" y="517" width="0.3417%" height="15" fill="rgb(248,100,22)" fg:x="7716867" fg:w="27766"/><text x="95.2237%" y="527.50"></text></g><g><title>method_vectorcall (27,766 samples, 0.34%)</title><rect x="94.9737%" y="501" width="0.3417%" height="15" fill="rgb(208,67,9)" fg:x="7716867" fg:w="27766"/><text x="95.2237%" y="511.50"></text></g><g><title>PyObject_Call (27,769 samples, 0.34%)</title><rect x="94.9737%" y="661" width="0.3418%" height="15" fill="rgb(219,133,21)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="671.50"></text></g><g><title>slot_tp_call (27,769 samples, 0.34%)</title><rect x="94.9737%" y="645" width="0.3418%" height="15" fill="rgb(246,46,29)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="655.50"></text></g><g><title>_PyObject_Call_Prepend (27,769 samples, 0.34%)</title><rect x="94.9737%" y="629" width="0.3418%" height="15" fill="rgb(246,185,52)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="639.50"></text></g><g><title>_PyObject_FastCallDictTstate (27,769 samples, 0.34%)</title><rect x="94.9737%" y="613" width="0.3418%" height="15" fill="rgb(252,136,11)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="623.50"></text></g><g><title>_PyFunction_Vectorcall (27,769 samples, 0.34%)</title><rect x="94.9737%" y="597" width="0.3418%" height="15" fill="rgb(219,138,53)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="607.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,769 samples, 0.34%)</title><rect x="94.9737%" y="581" width="0.3418%" height="15" fill="rgb(211,51,23)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="591.50"></text></g><g><title>PyObject_Call (27,769 samples, 0.34%)</title><rect x="94.9737%" y="565" width="0.3418%" height="15" fill="rgb(247,221,28)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="575.50"></text></g><g><title>method_vectorcall (27,769 samples, 0.34%)</title><rect x="94.9737%" y="549" width="0.3418%" height="15" fill="rgb(251,222,45)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="559.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,769 samples, 0.34%)</title><rect x="94.9737%" y="533" width="0.3418%" height="15" fill="rgb(217,162,53)" fg:x="7716867" fg:w="27769"/><text x="95.2237%" y="543.50"></text></g><g><title>PyObject_Call (27,917 samples, 0.34%)</title><rect x="94.9736%" y="709" width="0.3436%" height="15" fill="rgb(229,93,14)" fg:x="7716856" fg:w="27917"/><text x="95.2236%" y="719.50"></text></g><g><title>method_vectorcall (27,917 samples, 0.34%)</title><rect x="94.9736%" y="693" width="0.3436%" height="15" fill="rgb(209,67,49)" fg:x="7716856" fg:w="27917"/><text x="95.2236%" y="703.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,917 samples, 0.34%)</title><rect x="94.9736%" y="677" width="0.3436%" height="15" fill="rgb(213,87,29)" fg:x="7716856" fg:w="27917"/><text x="95.2236%" y="687.50"></text></g><g><title>PyObject_Call (27,918 samples, 0.34%)</title><rect x="94.9736%" y="757" width="0.3436%" height="15" fill="rgb(205,151,52)" fg:x="7716856" fg:w="27918"/><text x="95.2236%" y="767.50"></text></g><g><title>method_vectorcall (27,918 samples, 0.34%)</title><rect x="94.9736%" y="741" width="0.3436%" height="15" fill="rgb(253,215,39)" fg:x="7716856" fg:w="27918"/><text x="95.2236%" y="751.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,918 samples, 0.34%)</title><rect x="94.9736%" y="725" width="0.3436%" height="15" fill="rgb(221,220,41)" fg:x="7716856" fg:w="27918"/><text x="95.2236%" y="735.50"></text></g><g><title>_PyObject_MakeTpCall (27,938 samples, 0.34%)</title><rect x="94.9733%" y="853" width="0.3438%" height="15" fill="rgb(218,133,21)" fg:x="7716837" fg:w="27938"/><text x="95.2233%" y="863.50"></text></g><g><title>slot_tp_call (27,937 samples, 0.34%)</title><rect x="94.9734%" y="837" width="0.3438%" height="15" fill="rgb(221,193,43)" fg:x="7716838" fg:w="27937"/><text x="95.2234%" y="847.50"></text></g><g><title>_PyObject_Call_Prepend (27,937 samples, 0.34%)</title><rect x="94.9734%" y="821" width="0.3438%" height="15" fill="rgb(240,128,52)" fg:x="7716838" fg:w="27937"/><text x="95.2234%" y="831.50"></text></g><g><title>_PyObject_FastCallDictTstate (27,937 samples, 0.34%)</title><rect x="94.9734%" y="805" width="0.3438%" height="15" fill="rgb(253,114,12)" fg:x="7716838" fg:w="27937"/><text x="95.2234%" y="815.50"></text></g><g><title>_PyFunction_Vectorcall (27,919 samples, 0.34%)</title><rect x="94.9736%" y="789" width="0.3436%" height="15" fill="rgb(215,223,47)" fg:x="7716856" fg:w="27919"/><text x="95.2236%" y="799.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,919 samples, 0.34%)</title><rect x="94.9736%" y="773" width="0.3436%" height="15" fill="rgb(248,225,23)" fg:x="7716856" fg:w="27919"/><text x="95.2236%" y="783.50"></text></g><g><title>method_vectorcall (27,946 samples, 0.34%)</title><rect x="94.9733%" y="885" width="0.3439%" height="15" fill="rgb(250,108,0)" fg:x="7716830" fg:w="27946"/><text x="95.2233%" y="895.50"></text></g><g><title>_PyEval_EvalFrameDefault (27,946 samples, 0.34%)</title><rect x="94.9733%" y="869" width="0.3439%" height="15" fill="rgb(228,208,7)" fg:x="7716830" fg:w="27946"/><text x="95.2233%" y="879.50"></text></g><g><title>slot_tp_call (28,803 samples, 0.35%)</title><rect x="94.9720%" y="1253" width="0.3545%" height="15" fill="rgb(244,45,10)" fg:x="7716727" fg:w="28803"/><text x="95.2220%" y="1263.50"></text></g><g><title>_PyObject_Call_Prepend (28,803 samples, 0.35%)</title><rect x="94.9720%" y="1237" width="0.3545%" height="15" fill="rgb(207,125,25)" fg:x="7716727" fg:w="28803"/><text x="95.2220%" y="1247.50"></text></g><g><title>_PyObject_FastCallDictTstate (28,803 samples, 0.35%)</title><rect x="94.9720%" y="1221" width="0.3545%" height="15" fill="rgb(210,195,18)" fg:x="7716727" fg:w="28803"/><text x="95.2220%" y="1231.50"></text></g><g><title>_PyFunction_Vectorcall (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1205" width="0.3533%" height="15" fill="rgb(249,80,12)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1215.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1189" width="0.3533%" height="15" fill="rgb(221,65,9)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1199.50"></text></g><g><title>PyObject_Call (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1173" width="0.3533%" height="15" fill="rgb(235,49,36)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1183.50"></text></g><g><title>method_vectorcall (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1157" width="0.3533%" height="15" fill="rgb(225,32,20)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1167.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1141" width="0.3533%" height="15" fill="rgb(215,141,46)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1151.50"></text></g><g><title>PyObject_Call (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1125" width="0.3533%" height="15" fill="rgb(250,160,47)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1135.50"></text></g><g><title>method_vectorcall (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1109" width="0.3533%" height="15" fill="rgb(216,222,40)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1119.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,705 samples, 0.35%)</title><rect x="94.9732%" y="1093" width="0.3533%" height="15" fill="rgb(234,217,39)" fg:x="7716825" fg:w="28705"/><text x="95.2232%" y="1103.50"></text></g><g><title>_PyObject_MakeTpCall (28,704 samples, 0.35%)</title><rect x="94.9732%" y="1077" width="0.3533%" height="15" fill="rgb(207,178,40)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1087.50"></text></g><g><title>slot_tp_call (28,704 samples, 0.35%)</title><rect x="94.9732%" y="1061" width="0.3533%" height="15" fill="rgb(221,136,13)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1071.50"></text></g><g><title>_PyObject_Call_Prepend (28,704 samples, 0.35%)</title><rect x="94.9732%" y="1045" width="0.3533%" height="15" fill="rgb(249,199,10)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1055.50"></text></g><g><title>_PyObject_FastCallDictTstate (28,704 samples, 0.35%)</title><rect x="94.9732%" y="1029" width="0.3533%" height="15" fill="rgb(249,222,13)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1039.50"></text></g><g><title>_PyFunction_Vectorcall (28,704 samples, 0.35%)</title><rect x="94.9732%" y="1013" width="0.3533%" height="15" fill="rgb(244,185,38)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1023.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,704 samples, 0.35%)</title><rect x="94.9732%" y="997" width="0.3533%" height="15" fill="rgb(236,202,9)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="1007.50"></text></g><g><title>PyObject_Call (28,704 samples, 0.35%)</title><rect x="94.9732%" y="981" width="0.3533%" height="15" fill="rgb(250,229,37)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="991.50"></text></g><g><title>method_vectorcall (28,704 samples, 0.35%)</title><rect x="94.9732%" y="965" width="0.3533%" height="15" fill="rgb(206,174,23)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="975.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,704 samples, 0.35%)</title><rect x="94.9732%" y="949" width="0.3533%" height="15" fill="rgb(211,33,43)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="959.50"></text></g><g><title>PyObject_Call (28,704 samples, 0.35%)</title><rect x="94.9732%" y="933" width="0.3533%" height="15" fill="rgb(245,58,50)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="943.50"></text></g><g><title>method_vectorcall (28,704 samples, 0.35%)</title><rect x="94.9732%" y="917" width="0.3533%" height="15" fill="rgb(244,68,36)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="927.50"></text></g><g><title>_PyEval_EvalFrameDefault (28,704 samples, 0.35%)</title><rect x="94.9732%" y="901" width="0.3533%" height="15" fill="rgb(232,229,15)" fg:x="7716826" fg:w="28704"/><text x="95.2232%" y="911.50"></text></g><g><title>_PyObject_MakeTpCall (28,886 samples, 0.36%)</title><rect x="94.9710%" y="1269" width="0.3555%" height="15" fill="rgb(254,30,23)" fg:x="7716645" fg:w="28886"/><text x="95.2210%" y="1279.50"></text></g><g><title>_PyEval_EvalFrameDefault (116,661 samples, 1.44%)</title><rect x="93.8956%" y="1285" width="1.4358%" height="15" fill="rgb(235,160,14)" fg:x="7629270" fg:w="116661"/><text x="94.1456%" y="1295.50"></text></g><g><title>_PyFunction_Vectorcall (116,714 samples, 1.44%)</title><rect x="93.8956%" y="1301" width="1.4364%" height="15" fill="rgb(212,155,44)" fg:x="7629270" fg:w="116714"/><text x="94.1456%" y="1311.50"></text></g><g><title>_PyFunction_Vectorcall (117,671 samples, 1.45%)</title><rect x="93.8956%" y="1333" width="1.4482%" height="15" fill="rgb(226,2,50)" fg:x="7629268" fg:w="117671"/><text x="94.1456%" y="1343.50"></text></g><g><title>_PyEval_EvalFrameDefault (117,671 samples, 1.45%)</title><rect x="93.8956%" y="1317" width="1.4482%" height="15" fill="rgb(234,177,6)" fg:x="7629268" fg:w="117671"/><text x="94.1456%" y="1327.50"></text></g><g><title>[libcuda.so.560.35.03] (1,433 samples, 0.02%)</title><rect x="95.3558%" y="165" width="0.0176%" height="15" fill="rgb(217,24,9)" fg:x="7747914" fg:w="1433"/><text x="95.6058%" y="175.50"></text></g><g><title>method_vectorcall_VARARGS_KEYWORDS (2,385 samples, 0.03%)</title><rect x="95.3441%" y="469" width="0.0294%" height="15" fill="rgb(220,13,46)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="479.50"></text></g><g><title>torch::autograd::THPVariable_copy_ (2,385 samples, 0.03%)</title><rect x="95.3441%" y="453" width="0.0294%" height="15" fill="rgb(239,221,27)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="463.50"></text></g><g><title>at::_ops::copy_::call (2,385 samples, 0.03%)</title><rect x="95.3441%" y="437" width="0.0294%" height="15" fill="rgb(222,198,25)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="447.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::copy_ (2,385 samples, 0.03%)</title><rect x="95.3441%" y="421" width="0.0294%" height="15" fill="rgb(211,99,13)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="431.50"></text></g><g><title>at::_ops::copy_::redispatch (2,385 samples, 0.03%)</title><rect x="95.3441%" y="405" width="0.0294%" height="15" fill="rgb(232,111,31)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="415.50"></text></g><g><title>torch::ADInplaceOrView::copy_ (2,385 samples, 0.03%)</title><rect x="95.3441%" y="389" width="0.0294%" height="15" fill="rgb(245,82,37)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="399.50"></text></g><g><title>at::_ops::copy_::redispatch (2,385 samples, 0.03%)</title><rect x="95.3441%" y="373" width="0.0294%" height="15" fill="rgb(227,149,46)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="383.50"></text></g><g><title>at::native::copy_ (2,385 samples, 0.03%)</title><rect x="95.3441%" y="357" width="0.0294%" height="15" fill="rgb(218,36,50)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="367.50"></text></g><g><title>at::native::copy_impl (2,385 samples, 0.03%)</title><rect x="95.3441%" y="341" width="0.0294%" height="15" fill="rgb(226,80,48)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="351.50"></text></g><g><title>at::native::copy_kernel_cuda (2,385 samples, 0.03%)</title><rect x="95.3441%" y="325" width="0.0294%" height="15" fill="rgb(238,224,15)" fg:x="7746963" fg:w="2385"/><text x="95.5941%" y="335.50"></text></g><g><title>cudaStreamSynchronize (2,384 samples, 0.03%)</title><rect x="95.3441%" y="309" width="0.0293%" height="15" fill="rgb(241,136,10)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="319.50"></text></g><g><title>[libcudart.so.12] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="293" width="0.0293%" height="15" fill="rgb(208,32,45)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="303.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="277" width="0.0293%" height="15" fill="rgb(207,135,9)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="287.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="261" width="0.0293%" height="15" fill="rgb(206,86,44)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="271.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="245" width="0.0293%" height="15" fill="rgb(245,177,15)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="255.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="229" width="0.0293%" height="15" fill="rgb(206,64,50)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="239.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="213" width="0.0293%" height="15" fill="rgb(234,36,40)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="223.50"></text></g><g><title>[libcuda.so.560.35.03] (2,384 samples, 0.03%)</title><rect x="95.3441%" y="197" width="0.0293%" height="15" fill="rgb(213,64,8)" fg:x="7746964" fg:w="2384"/><text x="95.5941%" y="207.50"></text></g><g><title>[libcuda.so.560.35.03] (2,070 samples, 0.03%)</title><rect x="95.3480%" y="181" width="0.0255%" height="15" fill="rgb(210,75,36)" fg:x="7747278" fg:w="2070"/><text x="95.5980%" y="191.50"></text></g><g><title>PyObject_Call (2,395 samples, 0.03%)</title><rect x="95.3440%" y="725" width="0.0295%" height="15" fill="rgb(229,88,21)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="735.50"></text></g><g><title>slot_tp_call (2,395 samples, 0.03%)</title><rect x="95.3440%" y="709" width="0.0295%" height="15" fill="rgb(252,204,47)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="719.50"></text></g><g><title>_PyObject_Call_Prepend (2,395 samples, 0.03%)</title><rect x="95.3440%" y="693" width="0.0295%" height="15" fill="rgb(208,77,27)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="703.50"></text></g><g><title>_PyObject_FastCallDictTstate (2,395 samples, 0.03%)</title><rect x="95.3440%" y="677" width="0.0295%" height="15" fill="rgb(221,76,26)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="687.50"></text></g><g><title>_PyFunction_Vectorcall (2,395 samples, 0.03%)</title><rect x="95.3440%" y="661" width="0.0295%" height="15" fill="rgb(225,139,18)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="671.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,395 samples, 0.03%)</title><rect x="95.3440%" y="645" width="0.0295%" height="15" fill="rgb(230,137,11)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="655.50"></text></g><g><title>PyObject_Call (2,395 samples, 0.03%)</title><rect x="95.3440%" y="629" width="0.0295%" height="15" fill="rgb(212,28,1)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="639.50"></text></g><g><title>method_vectorcall (2,395 samples, 0.03%)</title><rect x="95.3440%" y="613" width="0.0295%" height="15" fill="rgb(248,164,17)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="623.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,395 samples, 0.03%)</title><rect x="95.3440%" y="597" width="0.0295%" height="15" fill="rgb(222,171,42)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="607.50"></text></g><g><title>PyObject_Call (2,395 samples, 0.03%)</title><rect x="95.3440%" y="581" width="0.0295%" height="15" fill="rgb(243,84,45)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="591.50"></text></g><g><title>method_vectorcall (2,395 samples, 0.03%)</title><rect x="95.3440%" y="565" width="0.0295%" height="15" fill="rgb(252,49,23)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="575.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,395 samples, 0.03%)</title><rect x="95.3440%" y="549" width="0.0295%" height="15" fill="rgb(215,19,7)" fg:x="7746954" fg:w="2395"/><text x="95.5940%" y="559.50"></text></g><g><title>method_vectorcall (2,388 samples, 0.03%)</title><rect x="95.3441%" y="533" width="0.0294%" height="15" fill="rgb(238,81,41)" fg:x="7746961" fg:w="2388"/><text x="95.5941%" y="543.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,388 samples, 0.03%)</title><rect x="95.3441%" y="517" width="0.0294%" height="15" fill="rgb(210,199,37)" fg:x="7746961" fg:w="2388"/><text x="95.5941%" y="527.50"></text></g><g><title>_PyFunction_Vectorcall (2,388 samples, 0.03%)</title><rect x="95.3441%" y="501" width="0.0294%" height="15" fill="rgb(244,192,49)" fg:x="7746961" fg:w="2388"/><text x="95.5941%" y="511.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,388 samples, 0.03%)</title><rect x="95.3441%" y="485" width="0.0294%" height="15" fill="rgb(226,211,11)" fg:x="7746961" fg:w="2388"/><text x="95.5941%" y="495.50"></text></g><g><title>_PyObject_MakeTpCall (2,413 samples, 0.03%)</title><rect x="95.3438%" y="1333" width="0.0297%" height="15" fill="rgb(236,162,54)" fg:x="7746939" fg:w="2413"/><text x="95.5938%" y="1343.50"></text></g><g><title>slot_tp_call (2,413 samples, 0.03%)</title><rect x="95.3438%" y="1317" width="0.0297%" height="15" fill="rgb(220,229,9)" fg:x="7746939" fg:w="2413"/><text x="95.5938%" y="1327.50"></text></g><g><title>_PyObject_Call_Prepend (2,413 samples, 0.03%)</title><rect x="95.3438%" y="1301" width="0.0297%" height="15" fill="rgb(250,87,22)" fg:x="7746939" fg:w="2413"/><text x="95.5938%" y="1311.50"></text></g><g><title>_PyObject_FastCallDictTstate (2,413 samples, 0.03%)</title><rect x="95.3438%" y="1285" width="0.0297%" height="15" fill="rgb(239,43,17)" fg:x="7746939" fg:w="2413"/><text x="95.5938%" y="1295.50"></text></g><g><title>_PyFunction_Vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1269" width="0.0295%" height="15" fill="rgb(231,177,25)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1279.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1253" width="0.0295%" height="15" fill="rgb(219,179,1)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1263.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1237" width="0.0295%" height="15" fill="rgb(238,219,53)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1247.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1221" width="0.0295%" height="15" fill="rgb(232,167,36)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1231.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1205" width="0.0295%" height="15" fill="rgb(244,19,51)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1215.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1189" width="0.0295%" height="15" fill="rgb(224,6,22)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1199.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1173" width="0.0295%" height="15" fill="rgb(224,145,5)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1183.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1157" width="0.0295%" height="15" fill="rgb(234,130,49)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1167.50"></text></g><g><title>_PyObject_MakeTpCall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1141" width="0.0295%" height="15" fill="rgb(254,6,2)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1151.50"></text></g><g><title>slot_tp_call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1125" width="0.0295%" height="15" fill="rgb(208,96,46)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1135.50"></text></g><g><title>_PyObject_Call_Prepend (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1109" width="0.0295%" height="15" fill="rgb(239,3,39)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1119.50"></text></g><g><title>_PyObject_FastCallDictTstate (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1093" width="0.0295%" height="15" fill="rgb(233,210,1)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1103.50"></text></g><g><title>_PyFunction_Vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1077" width="0.0295%" height="15" fill="rgb(244,137,37)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1087.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1061" width="0.0295%" height="15" fill="rgb(240,136,2)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1071.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1045" width="0.0295%" height="15" fill="rgb(239,18,37)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1055.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1029" width="0.0295%" height="15" fill="rgb(218,185,22)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1039.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="1013" width="0.0295%" height="15" fill="rgb(225,218,4)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1023.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="997" width="0.0295%" height="15" fill="rgb(230,182,32)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="1007.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="981" width="0.0295%" height="15" fill="rgb(242,56,43)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="991.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="965" width="0.0295%" height="15" fill="rgb(233,99,24)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="975.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="949" width="0.0295%" height="15" fill="rgb(234,209,42)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="959.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="933" width="0.0295%" height="15" fill="rgb(227,7,12)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="943.50"></text></g><g><title>_PyObject_MakeTpCall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="917" width="0.0295%" height="15" fill="rgb(245,203,43)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="927.50"></text></g><g><title>slot_tp_call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="901" width="0.0295%" height="15" fill="rgb(238,205,33)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="911.50"></text></g><g><title>_PyObject_Call_Prepend (2,398 samples, 0.03%)</title><rect x="95.3440%" y="885" width="0.0295%" height="15" fill="rgb(231,56,7)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="895.50"></text></g><g><title>_PyObject_FastCallDictTstate (2,398 samples, 0.03%)</title><rect x="95.3440%" y="869" width="0.0295%" height="15" fill="rgb(244,186,29)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="879.50"></text></g><g><title>_PyFunction_Vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="853" width="0.0295%" height="15" fill="rgb(234,111,31)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="863.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="837" width="0.0295%" height="15" fill="rgb(241,149,10)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="847.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="821" width="0.0295%" height="15" fill="rgb(249,206,44)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="831.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="805" width="0.0295%" height="15" fill="rgb(251,153,30)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="815.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="789" width="0.0295%" height="15" fill="rgb(239,152,38)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="799.50"></text></g><g><title>PyObject_Call (2,398 samples, 0.03%)</title><rect x="95.3440%" y="773" width="0.0295%" height="15" fill="rgb(249,139,47)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="783.50"></text></g><g><title>method_vectorcall (2,398 samples, 0.03%)</title><rect x="95.3440%" y="757" width="0.0295%" height="15" fill="rgb(244,64,35)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="767.50"></text></g><g><title>_PyEval_EvalFrameDefault (2,398 samples, 0.03%)</title><rect x="95.3440%" y="741" width="0.0295%" height="15" fill="rgb(216,46,15)" fg:x="7746954" fg:w="2398"/><text x="95.5940%" y="751.50"></text></g><g><title>_PyFunction_Vectorcall (120,106 samples, 1.48%)</title><rect x="93.8956%" y="1365" width="1.4782%" height="15" fill="rgb(250,74,19)" fg:x="7629264" fg:w="120106"/><text x="94.1456%" y="1375.50"></text></g><g><title>_PyEval_EvalFrameDefault (120,106 samples, 1.48%)</title><rect x="93.8956%" y="1349" width="1.4782%" height="15" fill="rgb(249,42,33)" fg:x="7629264" fg:w="120106"/><text x="94.1456%" y="1359.50"></text></g><g><title>_PyFunction_Vectorcall (120,165 samples, 1.48%)</title><rect x="93.8954%" y="1397" width="1.4789%" height="15" fill="rgb(242,149,17)" fg:x="7629255" fg:w="120165"/><text x="94.1454%" y="1407.50"></text></g><g><title>_PyEval_EvalFrameDefault (120,165 samples, 1.48%)</title><rect x="93.8954%" y="1381" width="1.4789%" height="15" fill="rgb(244,29,21)" fg:x="7629255" fg:w="120165"/><text x="94.1454%" y="1391.50"></text></g><g><title>_PyEval_EvalFrameDefault (120,530 samples, 1.48%)</title><rect x="93.8929%" y="1413" width="1.4834%" height="15" fill="rgb(220,130,37)" fg:x="7629045" fg:w="120530"/><text x="94.1429%" y="1423.50"></text></g><g><title>clock_gettime (158,016 samples, 1.94%)</title><rect x="95.3892%" y="1413" width="1.9447%" height="15" fill="rgb(211,67,2)" fg:x="7750626" fg:w="158016"/><text x="95.6392%" y="1423.50">c..</text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (7,947 samples, 0.10%)</title><rect x="97.3458%" y="661" width="0.0978%" height="15" fill="rgb(235,68,52)" fg:x="7909608" fg:w="7947"/><text x="97.5958%" y="671.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (7,947 samples, 0.10%)</title><rect x="97.3458%" y="645" width="0.0978%" height="15" fill="rgb(246,142,3)" fg:x="7909608" fg:w="7947"/><text x="97.5958%" y="655.50"></text></g><g><title>_PyFunction_Vectorcall (7,954 samples, 0.10%)</title><rect x="97.3458%" y="757" width="0.0979%" height="15" fill="rgb(241,25,7)" fg:x="7909602" fg:w="7954"/><text x="97.5958%" y="767.50"></text></g><g><title>_PyEval_EvalFrameDefault (7,954 samples, 0.10%)</title><rect x="97.3458%" y="741" width="0.0979%" height="15" fill="rgb(242,119,39)" fg:x="7909602" fg:w="7954"/><text x="97.5958%" y="751.50"></text></g><g><title>method_vectorcall (7,950 samples, 0.10%)</title><rect x="97.3458%" y="725" width="0.0978%" height="15" fill="rgb(241,98,45)" fg:x="7909606" fg:w="7950"/><text x="97.5958%" y="735.50"></text></g><g><title>_PyObject_MakeTpCall (7,950 samples, 0.10%)</title><rect x="97.3458%" y="709" width="0.0978%" height="15" fill="rgb(254,28,30)" fg:x="7909606" fg:w="7950"/><text x="97.5958%" y="719.50"></text></g><g><title>cfunction_call (7,950 samples, 0.10%)</title><rect x="97.3458%" y="693" width="0.0978%" height="15" fill="rgb(241,142,54)" fg:x="7909606" fg:w="7950"/><text x="97.5958%" y="703.50"></text></g><g><title>[cpuinfer_ext.cpython-310-x86_64-linux-gnu.so] (7,950 samples, 0.10%)</title><rect x="97.3458%" y="677" width="0.0978%" height="15" fill="rgb(222,85,15)" fg:x="7909606" fg:w="7950"/><text x="97.5958%" y="687.50"></text></g><g><title>[libcuda.so.560.35.03] (24,251 samples, 0.30%)</title><rect x="97.7791%" y="389" width="0.2985%" height="15" fill="rgb(210,85,47)" fg:x="7944815" fg:w="24251"/><text x="98.0291%" y="399.50"></text></g><g><title>[libcuda.so.560.35.03] (34,100 samples, 0.42%)</title><rect x="97.6582%" y="405" width="0.4197%" height="15" fill="rgb(224,206,25)" fg:x="7934991" fg:w="34100"/><text x="97.9082%" y="415.50"></text></g><g><title>[libcuda.so.560.35.03] (39,573 samples, 0.49%)</title><rect x="97.5909%" y="421" width="0.4870%" height="15" fill="rgb(243,201,19)" fg:x="7929522" fg:w="39573"/><text x="97.8409%" y="431.50"></text></g><g><title>[[vdso]] (4,710 samples, 0.06%)</title><rect x="98.1007%" y="389" width="0.0580%" height="15" fill="rgb(236,59,4)" fg:x="7970946" fg:w="4710"/><text x="98.3507%" y="399.50"></text></g><g><title>[[vdso]] (6,425 samples, 0.08%)</title><rect x="98.0796%" y="405" width="0.0791%" height="15" fill="rgb(254,179,45)" fg:x="7969232" fg:w="6425"/><text x="98.3296%" y="415.50"></text></g><g><title>clock_gettime (6,671 samples, 0.08%)</title><rect x="98.0783%" y="421" width="0.0821%" height="15" fill="rgb(226,14,10)" fg:x="7969120" fg:w="6671"/><text x="98.3283%" y="431.50"></text></g><g><title>[libcuda.so.560.35.03] (53,391 samples, 0.66%)</title><rect x="97.5080%" y="437" width="0.6571%" height="15" fill="rgb(244,27,41)" fg:x="7922781" fg:w="53391"/><text x="97.7580%" y="447.50"></text></g><g><title>at::_ops::_local_scalar_dense::call (58,076 samples, 0.71%)</title><rect x="97.4504%" y="677" width="0.7148%" height="15" fill="rgb(235,35,32)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="687.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (c10::DispatchKeySet, at::Tensor const&amp;), &amp;torch::autograd::VariableType::(anonymous namespace)::_local_scalar_dense&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;c10::DispatchKeySet, at::Tensor const&amp;&gt; &gt;, c10::Scalar (c10::DispatchKeySet, at::Tensor const&amp;)&gt;::call (58,076 samples, 0.71%)</title><rect x="97.4504%" y="661" width="0.7148%" height="15" fill="rgb(218,68,31)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="671.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::_local_scalar_dense (58,076 samples, 0.71%)</title><rect x="97.4504%" y="645" width="0.7148%" height="15" fill="rgb(207,120,37)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="655.50"></text></g><g><title>at::_ops::_local_scalar_dense::redispatch (58,076 samples, 0.71%)</title><rect x="97.4504%" y="629" width="0.7148%" height="15" fill="rgb(227,98,0)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="639.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (at::Tensor const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA___local_scalar_dense&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;at::Tensor const&amp;&gt; &gt;, c10::Scalar (at::Tensor const&amp;)&gt;::call (58,076 samples, 0.71%)</title><rect x="97.4504%" y="613" width="0.7148%" height="15" fill="rgb(207,7,3)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="623.50"></text></g><g><title>at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA___local_scalar_dense (58,076 samples, 0.71%)</title><rect x="97.4504%" y="597" width="0.7148%" height="15" fill="rgb(206,98,19)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="607.50"></text></g><g><title>at::native::_local_scalar_dense_cuda (58,076 samples, 0.71%)</title><rect x="97.4504%" y="581" width="0.7148%" height="15" fill="rgb(217,5,26)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="591.50"></text></g><g><title>at::native::_local_scalar_dense_cuda (58,076 samples, 0.71%)</title><rect x="97.4504%" y="565" width="0.7148%" height="15" fill="rgb(235,190,38)" fg:x="7918103" fg:w="58076"/><text x="97.7004%" y="575.50"></text></g><g><title>c10::cuda::memcpy_and_sync (58,066 samples, 0.71%)</title><rect x="97.4505%" y="549" width="0.7146%" height="15" fill="rgb(247,86,24)" fg:x="7918113" fg:w="58066"/><text x="97.7005%" y="559.50"></text></g><g><title>cudaStreamSynchronize (58,061 samples, 0.71%)</title><rect x="97.4506%" y="533" width="0.7146%" height="15" fill="rgb(205,101,16)" fg:x="7918118" fg:w="58061"/><text x="97.7006%" y="543.50"></text></g><g><title>[libcudart.so.12] (58,061 samples, 0.71%)</title><rect x="97.4506%" y="517" width="0.7146%" height="15" fill="rgb(246,168,33)" fg:x="7918118" fg:w="58061"/><text x="97.7006%" y="527.50"></text></g><g><title>[libcuda.so.560.35.03] (58,061 samples, 0.71%)</title><rect x="97.4506%" y="501" width="0.7146%" height="15" fill="rgb(231,114,1)" fg:x="7918118" fg:w="58061"/><text x="97.7006%" y="511.50"></text></g><g><title>[libcuda.so.560.35.03] (58,061 samples, 0.71%)</title><rect x="97.4506%" y="485" width="0.7146%" height="15" fill="rgb(207,184,53)" fg:x="7918118" fg:w="58061"/><text x="97.7006%" y="495.50"></text></g><g><title>[libcuda.so.560.35.03] (58,060 samples, 0.71%)</title><rect x="97.4506%" y="469" width="0.7146%" height="15" fill="rgb(224,95,51)" fg:x="7918119" fg:w="58060"/><text x="97.7006%" y="479.50"></text></g><g><title>[libcuda.so.560.35.03] (58,060 samples, 0.71%)</title><rect x="97.4506%" y="453" width="0.7146%" height="15" fill="rgb(212,188,45)" fg:x="7918119" fg:w="58060"/><text x="97.7006%" y="463.50"></text></g><g><title>at::_ops::item::call (58,077 samples, 0.71%)</title><rect x="97.4504%" y="725" width="0.7148%" height="15" fill="rgb(223,154,38)" fg:x="7918103" fg:w="58077"/><text x="97.7004%" y="735.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;c10::Scalar (at::Tensor const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__item&gt;, c10::Scalar, c10::guts::typelist::typelist&lt;at::Tensor const&amp;&gt; &gt;, c10::Scalar (at::Tensor const&amp;)&gt;::call (58,077 samples, 0.71%)</title><rect x="97.4504%" y="709" width="0.7148%" height="15" fill="rgb(251,22,52)" fg:x="7918103" fg:w="58077"/><text x="97.7004%" y="719.50"></text></g><g><title>at::native::item (58,077 samples, 0.71%)</title><rect x="97.4504%" y="693" width="0.7148%" height="15" fill="rgb(229,209,22)" fg:x="7918103" fg:w="58077"/><text x="97.7004%" y="703.50"></text></g><g><title>torch::autograd::THPVariable_item (58,078 samples, 0.71%)</title><rect x="97.4504%" y="741" width="0.7148%" height="15" fill="rgb(234,138,34)" fg:x="7918103" fg:w="58078"/><text x="97.7004%" y="751.50"></text></g><g><title>method_vectorcall_NOARGS (58,079 samples, 0.71%)</title><rect x="97.4504%" y="757" width="0.7148%" height="15" fill="rgb(212,95,11)" fg:x="7918103" fg:w="58079"/><text x="97.7004%" y="767.50"></text></g><g><title>[libcuda.so.560.35.03] (4,760 samples, 0.06%)</title><rect x="98.2404%" y="453" width="0.0586%" height="15" fill="rgb(240,179,47)" fg:x="7982296" fg:w="4760"/><text x="98.4904%" y="463.50"></text></g><g><title>[libcuda.so.560.35.03] (7,060 samples, 0.09%)</title><rect x="98.2121%" y="469" width="0.0869%" height="15" fill="rgb(240,163,11)" fg:x="7979998" fg:w="7060"/><text x="98.4621%" y="479.50"></text></g><g><title>[libcuda.so.560.35.03] (8,356 samples, 0.10%)</title><rect x="98.1962%" y="485" width="0.1028%" height="15" fill="rgb(236,37,12)" fg:x="7978703" fg:w="8356"/><text x="98.4462%" y="495.50"></text></g><g><title>[[vdso]] (1,402 samples, 0.02%)</title><rect x="98.2994%" y="469" width="0.0173%" height="15" fill="rgb(232,164,16)" fg:x="7987089" fg:w="1402"/><text x="98.5494%" y="479.50"></text></g><g><title>[[vdso]] (1,003 samples, 0.01%)</title><rect x="98.3043%" y="453" width="0.0123%" height="15" fill="rgb(244,205,15)" fg:x="7987488" fg:w="1003"/><text x="98.5543%" y="463.50"></text></g><g><title>clock_gettime (1,438 samples, 0.02%)</title><rect x="98.2992%" y="485" width="0.0177%" height="15" fill="rgb(223,117,47)" fg:x="7987072" fg:w="1438"/><text x="98.5492%" y="495.50"></text></g><g><title>[libcuda.so.560.35.03] (11,325 samples, 0.14%)</title><rect x="98.1785%" y="501" width="0.1394%" height="15" fill="rgb(244,107,35)" fg:x="7977263" fg:w="11325"/><text x="98.4285%" y="511.50"></text></g><g><title>[libcuda.so.560.35.03] (12,377 samples, 0.15%)</title><rect x="98.1656%" y="517" width="0.1523%" height="15" fill="rgb(205,140,8)" fg:x="7976218" fg:w="12377"/><text x="98.4156%" y="527.50"></text></g><g><title>[libcuda.so.560.35.03] (12,380 samples, 0.15%)</title><rect x="98.1656%" y="565" width="0.1524%" height="15" fill="rgb(228,84,46)" fg:x="7976216" fg:w="12380"/><text x="98.4156%" y="575.50"></text></g><g><title>[libcuda.so.560.35.03] (12,380 samples, 0.15%)</title><rect x="98.1656%" y="549" width="0.1524%" height="15" fill="rgb(254,188,9)" fg:x="7976216" fg:w="12380"/><text x="98.4156%" y="559.50"></text></g><g><title>[libcuda.so.560.35.03] (12,379 samples, 0.15%)</title><rect x="98.1656%" y="533" width="0.1524%" height="15" fill="rgb(206,112,54)" fg:x="7976217" fg:w="12379"/><text x="98.4156%" y="543.50"></text></g><g><title>at::_ops::copy_::redispatch (12,410 samples, 0.15%)</title><rect x="98.1652%" y="693" width="0.1527%" height="15" fill="rgb(216,84,49)" fg:x="7976187" fg:w="12410"/><text x="98.4152%" y="703.50"></text></g><g><title>torch::ADInplaceOrView::copy_ (12,410 samples, 0.15%)</title><rect x="98.1652%" y="677" width="0.1527%" height="15" fill="rgb(214,194,35)" fg:x="7976187" fg:w="12410"/><text x="98.4152%" y="687.50"></text></g><g><title>at::_ops::copy_::redispatch (12,410 samples, 0.15%)</title><rect x="98.1652%" y="661" width="0.1527%" height="15" fill="rgb(249,28,3)" fg:x="7976187" fg:w="12410"/><text x="98.4152%" y="671.50"></text></g><g><title>at::native::copy_ (12,410 samples, 0.15%)</title><rect x="98.1652%" y="645" width="0.1527%" height="15" fill="rgb(222,56,52)" fg:x="7976187" fg:w="12410"/><text x="98.4152%" y="655.50"></text></g><g><title>at::native::copy_impl (12,409 samples, 0.15%)</title><rect x="98.1653%" y="629" width="0.1527%" height="15" fill="rgb(245,217,50)" fg:x="7976188" fg:w="12409"/><text x="98.4153%" y="639.50"></text></g><g><title>at::native::copy_kernel_cuda (12,405 samples, 0.15%)</title><rect x="98.1653%" y="613" width="0.1527%" height="15" fill="rgb(213,201,24)" fg:x="7976192" fg:w="12405"/><text x="98.4153%" y="623.50"></text></g><g><title>cudaStreamSynchronize (12,381 samples, 0.15%)</title><rect x="98.1656%" y="597" width="0.1524%" height="15" fill="rgb(248,116,28)" fg:x="7976216" fg:w="12381"/><text x="98.4156%" y="607.50"></text></g><g><title>[libcudart.so.12] (12,381 samples, 0.15%)</title><rect x="98.1656%" y="581" width="0.1524%" height="15" fill="rgb(219,72,43)" fg:x="7976216" fg:w="12381"/><text x="98.4156%" y="591.50"></text></g><g><title>at::_ops::copy_::call (12,413 samples, 0.15%)</title><rect x="98.1652%" y="725" width="0.1528%" height="15" fill="rgb(209,138,14)" fg:x="7976187" fg:w="12413"/><text x="98.4152%" y="735.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::copy_ (12,413 samples, 0.15%)</title><rect x="98.1652%" y="709" width="0.1528%" height="15" fill="rgb(222,18,33)" fg:x="7976187" fg:w="12413"/><text x="98.4152%" y="719.50"></text></g><g><title>torch::autograd::THPVariable_copy_ (12,421 samples, 0.15%)</title><rect x="98.1652%" y="741" width="0.1529%" height="15" fill="rgb(213,199,7)" fg:x="7976184" fg:w="12421"/><text x="98.4152%" y="751.50"></text></g><g><title>method_vectorcall_VARARGS_KEYWORDS (12,465 samples, 0.15%)</title><rect x="98.1652%" y="757" width="0.1534%" height="15" fill="rgb(250,110,10)" fg:x="7976182" fg:w="12465"/><text x="98.4152%" y="767.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,179 samples, 0.97%)</title><rect x="97.3455%" y="773" width="0.9745%" height="15" fill="rgb(248,123,6)" fg:x="7909580" fg:w="79179"/><text x="97.5955%" y="783.50"></text></g><g><title>_PyFunction_Vectorcall (79,190 samples, 0.97%)</title><rect x="97.3455%" y="789" width="0.9746%" height="15" fill="rgb(206,91,31)" fg:x="7909579" fg:w="79190"/><text x="97.5955%" y="799.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,246 samples, 0.98%)</title><rect x="97.3449%" y="805" width="0.9753%" height="15" fill="rgb(211,154,13)" fg:x="7909535" fg:w="79246"/><text x="97.5949%" y="815.50"></text></g><g><title>method_vectorcall (79,247 samples, 0.98%)</title><rect x="97.3449%" y="821" width="0.9753%" height="15" fill="rgb(225,148,7)" fg:x="7909535" fg:w="79247"/><text x="97.5949%" y="831.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,383 samples, 0.98%)</title><rect x="97.3436%" y="837" width="0.9770%" height="15" fill="rgb(220,160,43)" fg:x="7909423" fg:w="79383"/><text x="97.5936%" y="847.50"></text></g><g><title>PyObject_Call (79,387 samples, 0.98%)</title><rect x="97.3436%" y="869" width="0.9770%" height="15" fill="rgb(213,52,39)" fg:x="7909423" fg:w="79387"/><text x="97.5936%" y="879.50"></text></g><g><title>method_vectorcall (79,387 samples, 0.98%)</title><rect x="97.3436%" y="853" width="0.9770%" height="15" fill="rgb(243,137,7)" fg:x="7909423" fg:w="79387"/><text x="97.5936%" y="863.50"></text></g><g><title>PyObject_Call (79,388 samples, 0.98%)</title><rect x="97.3436%" y="917" width="0.9771%" height="15" fill="rgb(230,79,13)" fg:x="7909423" fg:w="79388"/><text x="97.5936%" y="927.50"></text></g><g><title>method_vectorcall (79,388 samples, 0.98%)</title><rect x="97.3436%" y="901" width="0.9771%" height="15" fill="rgb(247,105,23)" fg:x="7909423" fg:w="79388"/><text x="97.5936%" y="911.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,388 samples, 0.98%)</title><rect x="97.3436%" y="885" width="0.9771%" height="15" fill="rgb(223,179,41)" fg:x="7909423" fg:w="79388"/><text x="97.5936%" y="895.50"></text></g><g><title>_PyObject_Call_Prepend (79,390 samples, 0.98%)</title><rect x="97.3435%" y="981" width="0.9771%" height="15" fill="rgb(218,9,34)" fg:x="7909422" fg:w="79390"/><text x="97.5935%" y="991.50"></text></g><g><title>_PyObject_FastCallDictTstate (79,390 samples, 0.98%)</title><rect x="97.3435%" y="965" width="0.9771%" height="15" fill="rgb(222,106,8)" fg:x="7909422" fg:w="79390"/><text x="97.5935%" y="975.50"></text></g><g><title>_PyFunction_Vectorcall (79,389 samples, 0.98%)</title><rect x="97.3436%" y="949" width="0.9771%" height="15" fill="rgb(211,220,0)" fg:x="7909423" fg:w="79389"/><text x="97.5936%" y="959.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,389 samples, 0.98%)</title><rect x="97.3436%" y="933" width="0.9771%" height="15" fill="rgb(229,52,16)" fg:x="7909423" fg:w="79389"/><text x="97.5936%" y="943.50"></text></g><g><title>PyObject_Call (79,391 samples, 0.98%)</title><rect x="97.3435%" y="1013" width="0.9771%" height="15" fill="rgb(212,155,18)" fg:x="7909422" fg:w="79391"/><text x="97.5935%" y="1023.50"></text></g><g><title>slot_tp_call (79,391 samples, 0.98%)</title><rect x="97.3435%" y="997" width="0.9771%" height="15" fill="rgb(242,21,14)" fg:x="7909422" fg:w="79391"/><text x="97.5935%" y="1007.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,589 samples, 0.98%)</title><rect x="97.3434%" y="1029" width="0.9795%" height="15" fill="rgb(222,19,48)" fg:x="7909414" fg:w="79589"/><text x="97.5934%" y="1039.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,592 samples, 0.98%)</title><rect x="97.3434%" y="1077" width="0.9796%" height="15" fill="rgb(232,45,27)" fg:x="7909413" fg:w="79592"/><text x="97.5934%" y="1087.50"></text></g><g><title>PyObject_Call (79,591 samples, 0.98%)</title><rect x="97.3434%" y="1061" width="0.9795%" height="15" fill="rgb(249,103,42)" fg:x="7909414" fg:w="79591"/><text x="97.5934%" y="1071.50"></text></g><g><title>method_vectorcall (79,591 samples, 0.98%)</title><rect x="97.3434%" y="1045" width="0.9795%" height="15" fill="rgb(246,81,33)" fg:x="7909414" fg:w="79591"/><text x="97.5934%" y="1055.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,593 samples, 0.98%)</title><rect x="97.3434%" y="1125" width="0.9796%" height="15" fill="rgb(252,33,42)" fg:x="7909413" fg:w="79593"/><text x="97.5934%" y="1135.50"></text></g><g><title>PyObject_Call (79,593 samples, 0.98%)</title><rect x="97.3434%" y="1109" width="0.9796%" height="15" fill="rgb(209,212,41)" fg:x="7909413" fg:w="79593"/><text x="97.5934%" y="1119.50"></text></g><g><title>method_vectorcall (79,593 samples, 0.98%)</title><rect x="97.3434%" y="1093" width="0.9796%" height="15" fill="rgb(207,154,6)" fg:x="7909413" fg:w="79593"/><text x="97.5934%" y="1103.50"></text></g><g><title>slot_tp_call (79,606 samples, 0.98%)</title><rect x="97.3433%" y="1189" width="0.9797%" height="15" fill="rgb(223,64,47)" fg:x="7909402" fg:w="79606"/><text x="97.5933%" y="1199.50"></text></g><g><title>_PyObject_Call_Prepend (79,606 samples, 0.98%)</title><rect x="97.3433%" y="1173" width="0.9797%" height="15" fill="rgb(211,161,38)" fg:x="7909402" fg:w="79606"/><text x="97.5933%" y="1183.50"></text></g><g><title>_PyObject_FastCallDictTstate (79,606 samples, 0.98%)</title><rect x="97.3433%" y="1157" width="0.9797%" height="15" fill="rgb(219,138,40)" fg:x="7909402" fg:w="79606"/><text x="97.5933%" y="1167.50"></text></g><g><title>_PyFunction_Vectorcall (79,595 samples, 0.98%)</title><rect x="97.3434%" y="1141" width="0.9796%" height="15" fill="rgb(241,228,46)" fg:x="7909413" fg:w="79595"/><text x="97.5934%" y="1151.50"></text></g><g><title>method_vectorcall (79,617 samples, 0.98%)</title><rect x="97.3432%" y="1237" width="0.9799%" height="15" fill="rgb(223,209,38)" fg:x="7909393" fg:w="79617"/><text x="97.5932%" y="1247.50"></text></g><g><title>_PyEval_EvalFrameDefault (79,617 samples, 0.98%)</title><rect x="97.3432%" y="1221" width="0.9799%" height="15" fill="rgb(236,164,45)" fg:x="7909393" fg:w="79617"/><text x="97.5932%" y="1231.50"></text></g><g><title>_PyObject_MakeTpCall (79,609 samples, 0.98%)</title><rect x="97.3433%" y="1205" width="0.9798%" height="15" fill="rgb(231,15,5)" fg:x="7909401" fg:w="79609"/><text x="97.5933%" y="1215.50"></text></g><g><title>[libcuda.so.560.35.03] (930 samples, 0.01%)</title><rect x="98.3301%" y="741" width="0.0114%" height="15" fill="rgb(252,35,15)" fg:x="7989584" fg:w="930"/><text x="98.5801%" y="751.50"></text></g><g><title>[libcuda.so.560.35.03] (1,087 samples, 0.01%)</title><rect x="98.3282%" y="757" width="0.0134%" height="15" fill="rgb(248,181,18)" fg:x="7989429" fg:w="1087"/><text x="98.5782%" y="767.50"></text></g><g><title>cudaMemcpyAsync (1,757 samples, 0.02%)</title><rect x="98.3231%" y="949" width="0.0216%" height="15" fill="rgb(233,39,42)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="959.50"></text></g><g><title>[libcudart.so.12] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="933" width="0.0216%" height="15" fill="rgb(238,110,33)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="943.50"></text></g><g><title>[libcudart.so.12] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="917" width="0.0216%" height="15" fill="rgb(233,195,10)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="927.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="901" width="0.0216%" height="15" fill="rgb(254,105,3)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="911.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="885" width="0.0216%" height="15" fill="rgb(221,225,9)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="895.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="869" width="0.0216%" height="15" fill="rgb(224,227,45)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="879.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="853" width="0.0216%" height="15" fill="rgb(229,198,43)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="863.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="837" width="0.0216%" height="15" fill="rgb(206,209,35)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="847.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="821" width="0.0216%" height="15" fill="rgb(245,195,53)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="831.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="805" width="0.0216%" height="15" fill="rgb(240,92,26)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="815.50"></text></g><g><title>[libcuda.so.560.35.03] (1,757 samples, 0.02%)</title><rect x="98.3231%" y="789" width="0.0216%" height="15" fill="rgb(207,40,23)" fg:x="7989010" fg:w="1757"/><text x="98.5731%" y="799.50"></text></g><g><title>[libcuda.so.560.35.03] (1,626 samples, 0.02%)</title><rect x="98.3247%" y="773" width="0.0200%" height="15" fill="rgb(223,111,35)" fg:x="7989141" fg:w="1626"/><text x="98.5747%" y="783.50"></text></g><g><title>method_vectorcall_VARARGS_KEYWORDS (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1237" width="0.0216%" height="15" fill="rgb(229,147,28)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1247.50"></text></g><g><title>torch::autograd::THPVariable_to (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1221" width="0.0216%" height="15" fill="rgb(211,29,28)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1231.50"></text></g><g><title>torch::autograd::dispatch_to (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1205" width="0.0216%" height="15" fill="rgb(228,72,33)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1215.50"></text></g><g><title>at::_ops::to_dtype_layout::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1189" width="0.0216%" height="15" fill="rgb(205,214,31)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1199.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, bool, std::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd_dtype_layout_to&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, bool, std::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, bool, std::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1173" width="0.0216%" height="15" fill="rgb(224,111,15)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1183.50"></text></g><g><title>at::native::to (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1157" width="0.0216%" height="15" fill="rgb(253,21,26)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1167.50"></text></g><g><title>at::_ops::_to_copy::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1141" width="0.0216%" height="15" fill="rgb(245,139,43)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1151.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::DispatchKeySet, at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;), &amp;torch::autograd::VariableType::(anonymous namespace)::_to_copy&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::DispatchKeySet, at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (c10::DispatchKeySet, at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1125" width="0.0216%" height="15" fill="rgb(252,170,7)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1135.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::_to_copy (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1109" width="0.0216%" height="15" fill="rgb(231,118,14)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1119.50"></text></g><g><title>at::_ops::_to_copy::redispatch (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1093" width="0.0216%" height="15" fill="rgb(238,83,0)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1103.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::_to_copy&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1077" width="0.0216%" height="15" fill="rgb(221,39,39)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1087.50"></text></g><g><title>at::_ops::_to_copy::redispatch (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1061" width="0.0216%" height="15" fill="rgb(222,119,46)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1071.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd___to_copy&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor (at::Tensor const&amp;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;, bool, std::optional&lt;c10::MemoryFormat&gt;)&gt;::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1045" width="0.0216%" height="15" fill="rgb(222,165,49)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1055.50"></text></g><g><title>at::native::_to_copy (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1029" width="0.0216%" height="15" fill="rgb(219,113,52)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1039.50"></text></g><g><title>at::_ops::copy_::call (1,758 samples, 0.02%)</title><rect x="98.3231%" y="1013" width="0.0216%" height="15" fill="rgb(214,7,15)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1023.50"></text></g><g><title>at::native::copy_ (1,758 samples, 0.02%)</title><rect x="98.3231%" y="997" width="0.0216%" height="15" fill="rgb(235,32,4)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="1007.50"></text></g><g><title>at::native::copy_impl (1,758 samples, 0.02%)</title><rect x="98.3231%" y="981" width="0.0216%" height="15" fill="rgb(238,90,54)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="991.50"></text></g><g><title>at::native::copy_kernel_cuda (1,758 samples, 0.02%)</title><rect x="98.3231%" y="965" width="0.0216%" height="15" fill="rgb(213,208,19)" fg:x="7989010" fg:w="1758"/><text x="98.5731%" y="975.50"></text></g><g><title>PyObject_Call (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1333" width="1.0059%" height="15" fill="rgb(233,156,4)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1343.50"></text></g><g><title>method_vectorcall (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1317" width="1.0059%" height="15" fill="rgb(207,194,5)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1327.50"></text></g><g><title>_PyEval_EvalFrameDefault (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1301" width="1.0059%" height="15" fill="rgb(206,111,30)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1311.50"></text></g><g><title>PyObject_Call (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1285" width="1.0059%" height="15" fill="rgb(243,70,54)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1295.50"></text></g><g><title>method_vectorcall (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1269" width="1.0059%" height="15" fill="rgb(242,28,8)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1279.50"></text></g><g><title>_PyEval_EvalFrameDefault (81,730 samples, 1.01%)</title><rect x="97.3388%" y="1253" width="1.0059%" height="15" fill="rgb(219,106,18)" fg:x="7909039" fg:w="81730"/><text x="97.5888%" y="1263.50"></text></g><g><title>slot_tp_call (81,738 samples, 1.01%)</title><rect x="97.3387%" y="1413" width="1.0060%" height="15" fill="rgb(244,222,10)" fg:x="7909032" fg:w="81738"/><text x="97.5887%" y="1423.50"></text></g><g><title>_PyObject_Call_Prepend (81,735 samples, 1.01%)</title><rect x="97.3388%" y="1397" width="1.0059%" height="15" fill="rgb(236,179,52)" fg:x="7909035" fg:w="81735"/><text x="97.5888%" y="1407.50"></text></g><g><title>_PyObject_FastCallDictTstate (81,735 samples, 1.01%)</title><rect x="97.3388%" y="1381" width="1.0059%" height="15" fill="rgb(213,23,39)" fg:x="7909035" fg:w="81735"/><text x="97.5888%" y="1391.50"></text></g><g><title>_PyFunction_Vectorcall (81,731 samples, 1.01%)</title><rect x="97.3388%" y="1365" width="1.0059%" height="15" fill="rgb(238,48,10)" fg:x="7909039" fg:w="81731"/><text x="97.5888%" y="1375.50"></text></g><g><title>_PyEval_EvalFrameDefault (81,731 samples, 1.01%)</title><rect x="97.3388%" y="1349" width="1.0059%" height="15" fill="rgb(251,196,23)" fg:x="7909039" fg:w="81731"/><text x="97.5888%" y="1359.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (123,269 samples, 1.52%)</title><rect x="98.3448%" y="1413" width="1.5171%" height="15" fill="rgb(250,152,24)" fg:x="7990775" fg:w="123269"/><text x="98.5948%" y="1423.50"></text></g><g><title>[unknown] (586,008 samples, 7.21%)</title><rect x="92.6504%" y="1429" width="7.2122%" height="15" fill="rgb(209,150,17)" fg:x="7528088" fg:w="586008"/><text x="92.9004%" y="1439.50">[unknown]</text></g><g><title>asm_exc_page_fault (9,469 samples, 0.12%)</title><rect x="99.8631%" y="1429" width="0.1165%" height="15" fill="rgb(234,202,34)" fg:x="8114145" fg:w="9469"/><text x="100.1131%" y="1439.50"></text></g><g><title>all (8,125,266 samples, 100%)</title><rect x="0.0000%" y="1461" width="100.0000%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="8125266"/><text x="0.2500%" y="1471.50"></text></g><g><title>pt_main_thread (8,123,372 samples, 99.98%)</title><rect x="0.0233%" y="1445" width="99.9767%" height="15" fill="rgb(218,129,16)" fg:x="1894" fg:w="8123372"/><text x="0.2733%" y="1455.50">pt_main_thread</text></g></svg></svg>